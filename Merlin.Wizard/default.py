import base64;exec base64.b64decode('#####################################################################################################################################################################################################################################
##
##    Merlin Wizard
##    Version 11.0
##
##
##
##
##
##
##
##
##
##
##
#####################################################################################################################################################################################################################################
if 64 - 64: i11iIiiIii
import downloader
import extract
import fnmatch
import glob
import net
import os
import plugintools
import re
import shutil
import socket
import speedtest
import time
import urllib
import urllib2
import xbmc
import xbmcaddon
import xbmcgui
import xbmcplugin
import xbmcvfs
import zipfile
import uservar
if 65 - 65: O0 / iIii1I11I1II1 % OoooooooOO - i1IIi
try : from sqlite3 import dbapi2 as database
except : from pysqlite2 import dbapi2 as database
from datetime import date , datetime , timedelta
from resources . libs import extract , downloader , notify , debridit , traktit , loginit , skinSwitch , uploadLog , wizard as wiz
import pyxbmct . addonwindow as pyxbmct
if 73 - 73: II111iiii
IiII1IiiIiI1 = uservar . ADDON_ID
iIiiiI1IiI1I1 = uservar . ADDON_ID
o0OoOoOO00 = uservar . ADDONTITLE
I11i = wiz . addonId ( IiII1IiiIiI1 )
O0O = wiz . addonInfo ( IiII1IiiIiI1 , 'version' )
Oo = xbmcgui . Dialog ( )
I1ii11iIi11i = xbmcgui . DialogProgress ( )
I1IiI = xbmc . translatePath ( 'special://home/' )
o0OOO = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + iIiiiI1IiI1I1 , 'ICON.png' ) )
iIiiiI = xbmc . translatePath ( 'special://logpath/' )
Iii1ii1II11i = xbmc . translatePath ( 'special://profile/' )
iI111iI = os . path . join ( I1IiI , 'addons' )
IiII = os . path . join ( I1IiI , 'userdata' )
iI1Ii11111iIi = os . path . join ( iI111iI , IiII1IiiIiI1 )
i1i1II = os . path . join ( iI111iI , 'packages' )
O0oo0OO0 = os . path . join ( IiII , 'addon_data' )
I1i1iiI1 = os . path . join ( IiII , 'addon_data' , IiII1IiiIiI1 )
iiIIIII1i1iI = os . path . join ( IiII , 'advancedsettings.xml' )
o0oO0 = os . path . join ( IiII , 'sources.xml' )
oo00 = os . path . join ( IiII , 'favourites.xml' )
o00 = os . path . join ( IiII , 'profiles.xml' )
Oo0oO0ooo = os . path . join ( IiII , 'Thumbnails' )
o0oOoO00o = os . path . join ( IiII , 'Database' )
i1 = os . path . join ( iI1Ii11111iIi , 'fanart.jpg' )
oOOoo00O0O = os . path . join ( iI1Ii11111iIi , 'resources' , 'art' )
i1111 = os . path . join ( I1i1iiI1 , 'wizard.log' )
i11 = xbmc . getSkinDir ( )
I11 = wiz . getS ( 'buildname' )
Oo0o0000o0o0 = wiz . getS ( 'defaultskin' )
oOo0oooo00o = wiz . getS ( 'defaultskinname' )
oO0o0o0ooO0oO = wiz . getS ( 'defaultskinignore' )
oo0o0O00 = wiz . getS ( 'buildversion' )
oO = wiz . getS ( 'buildtheme' )
i1iiIIiiI111 = wiz . getS ( 'latestversion' )
oooOOOOO = wiz . getS ( 'show15' )
i1iiIII111ii = wiz . getS ( 'show16' )
i1iIIi1 = wiz . getS ( 'autoclean' )
ii11iIi1I = wiz . getS ( 'clearcache' )
iI111I11I1I1 = wiz . getS ( 'clearpackages' )
OOooO0OOoo = wiz . getS ( 'seperate' )
iIii1 = wiz . getS ( 'notify' )
oOOoO0 = wiz . getS ( 'noteid' )
O0OoO000O0OO = wiz . getS ( 'notedismiss' )
iiI1IiI = wiz . getS ( 'traktlastsave' )
II = wiz . getS ( 'debridlastsave' )
ooOoOoo0O = wiz . getS ( 'keepfavourites' )
OooO0 = wiz . getS ( 'keepsources' )
II11iiii1Ii = wiz . getS ( 'keepprofiles' )
OO0o = wiz . getS ( 'keepadvanced' )
Ooo = wiz . getS ( 'keeptrakt' )
O0o0Oo = wiz . getS ( 'keepdebrid' )
Oo00OOOOO = wiz . getS ( 'keeplogin' )
O0OO00o0OO = wiz . getS ( 'loginlastsave' )
I11i1 = wiz . getS ( 'developer' )
iIi1ii1I1 = date . today ( )
o0 = iIi1ii1I1 + timedelta ( days = 1 )
I11II1i = iIi1ii1I1 + timedelta ( days = 3 )
IIIII = float ( xbmc . getInfoLabel ( "System.BuildVersion" ) [ : 4 ] )
ooooooO0oo = "Kodi"
IIiiiiiiIi1I1 = uservar . EXCLUDES
I1IIIii = uservar . BUILDFILE
oOoOooOo0o0 = uservar . COMMFILE
OOOO = uservar . SKINFILE
OOO00 = uservar . APKFILE
iiiiiIIii = wiz . workingURL ( I1IIIii )
O000OO0 = wiz . workingURL ( OOO00 )
I11iii1Ii = uservar . UPDATECHECK if str ( uservar . UPDATECHECK ) . isdigit ( ) else 1
I1IIiiIiii = iIi1ii1I1 + timedelta ( days = I11iii1Ii )
O000oo0O = uservar . NOTIFICATION
OOOOi11i1 = uservar . ENABLE
IIIii1II1II = uservar . HEADERMESSAGE
i1I1iI = uservar . AUTOUPDATE
oo0OooOOo0 = uservar . WIZARDFILE
o0O = uservar . HIDECONTACT
O00oO = uservar . CONTACT
I11i1I1I = uservar . HIDESPACERS
oO0Oo = uservar . COLOR1
oOOoo0Oo = uservar . COLOR2
o00OO00OoO = uservar . THEME1
OOOO0OOoO0O0 = uservar . THEME2
O0Oo000ooO00 = uservar . THEME3
oO0 = uservar . THEME4
Ii1iIiII1ii1 = uservar . THEME5
ooOooo000oOO = uservar . THEME6
Oo0oOOo = uservar . THEME7
Oo0OoO00oOO0o = uservar . ICONMAINT if not uservar . ICONMAINT == 'http://' else o0OOO
OOO00O = uservar . ICONSC1 if not uservar . ICONSC1 == 'http://' else o0OOO
OOoOO0oo0ooO = uservar . ICONSC2 if not uservar . ICONSC2 == 'http://' else o0OOO
O0o0O00Oo0o0 = uservar . ICONSC3 if not uservar . ICONSC3 == 'http://' else o0OOO
O00O0oOO00O00 = uservar . ICONBUILDS if not uservar . ICONBUILDS == 'http://' else o0OOO
i1Oo00 = uservar . ICONAPK if not uservar . ICONAPK == 'http://' else o0OOO
i1i = uservar . ICONCONTACT if not uservar . ICONCONTACT == 'http://' else o0OOO
iiI111I1iIiI = uservar . ICONSAVE if not uservar . ICONSAVE == 'http://' else o0OOO
IIIi1I1IIii1II = uservar . ICONREAL if not uservar . ICONREAL == 'http://' else o0OOO
O0ii1ii1ii = uservar . ICONLOGIN if not uservar . ICONLOGIN == 'http://' else o0OOO
oooooOoo0ooo = uservar . ICONTRAKT if not uservar . ICONTRAKT == 'http://' else o0OOO
I1I1IiI1 = uservar . ICONSETTINGS if not uservar . ICONSETTINGS == 'http://' else o0OOO
III1iII1I1ii = wiz . LOGFILES
oOOo0 = traktit . TRAKTID
oo00O00oO = debridit . DEBRIDID
iIiIIIi = loginit . LOGINID
ooo00OOOooO = xbmc . translatePath ( os . path . join ( 'special://home/addons/Merlin.Wizard/intro.mp4' ) )
O00OOOoOoo0O = xbmc . translatePath ( 'special://userdata/addon_data/plugin.video.youtube/' )
O000OOo00oo = xbmc . translatePath ( 'special://userdata/Thumbnails/' )
oo0OOo = plugintools . get_setting ( "path" )
ooOOO00Ooo = plugintools . get_setting ( "path" )
IiIIIi1iIi = xbmcaddon . Addon ( id = iIiiiI1IiI1I1 )
ooOOoooooo = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + iIiiiI1IiI1I1 + '/resources/art' , 'BFOCUS.png' ) )
II1I = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + iIiiiI1IiI1I1 + '/resources/art' , 'BNOFOCUS.png' ) )
O0i1II1Iiii1I11 = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + iIiiiI1IiI1I1 + '/resources/art' , 'BORDER.jpg' ) )
IIII = xbmc . translatePath ( IiIIIi1iIi . getAddonInfo ( 'profile' ) )
iiIiI = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + iIiiiI1IiI1I1 + '/resources/art' , 'EXITFOCUS.png' ) )
o00oooO0Oo = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + iIiiiI1IiI1I1 , 'fanart1.jpg' ) )
o0O0OOO0Ooo = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + iIiiiI1IiI1I1 + '/resources/art' , 'BORDER.jpg' ) )
iiIiII1 = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + iIiiiI1IiI1I1 + '/resources/art' , 'BORDER.jpg' ) )
OOO00O0O = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + iIiiiI1IiI1I1 + '/resources/art' , 'BORDER.jpg' ) )
iii = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + iIiiiI1IiI1I1 + '/resources/art' , 'LFOCUS.png' ) )
oOooOOOoOo = xbmc . translatePath ( os . path . join ( 'special://home/addons/packages' , '' ) )
i1Iii1i1I = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + iIiiiI1IiI1I1 + '/resources/art' , 'speedtest.png' ) )
OOoO00 = xbmc . translatePath ( os . path . join ( 'special://home/userdata/Thumbnails' , '' ) )
IiI111111IIII = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + iIiiiI1IiI1I1 + '/resources/art' , 'line.png' ) )
i1Ii = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + iIiiiI1IiI1I1 + '/resources/art' , 'line.png' ) )
ii111iI1iIi1 = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + iIiiiI1IiI1I1 + '/resources/art' , 'vline.png' ) )
OOO = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + iIiiiI1IiI1I1 + '/resources/art' , 'vline.png' ) )
oo0OOo0 = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + iIiiiI1IiI1I1 + '/resources/art' , 'line.png' ) )
I11IiI = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + iIiiiI1IiI1I1 + '/resources/art' , 'vline.png' ) )
O0ooO0Oo00o = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + iIiiiI1IiI1I1 + '/resources/art' , 'vline.png' ) )
ooO0oOOooOo0 = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + iIiiiI1IiI1I1 + '/resources/art' , 'wsplash.png' ) )
i1I1ii11i1Iii = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + iIiiiI1IiI1I1 + '/resources/art' , 'listpanel1.png' ) )
I1IiiiiI = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + iIiiiI1IiI1I1 + '/resources/art' , 'speedpanel.png' ) )
o0OIiII = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + iIiiiI1IiI1I1 + '/resources/art' , 'listpanel1.png' ) )
ii1iII1II = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + iIiiiI1IiI1I1 + '/resources/art' , 'brand.png' ) )
Iii1I1I11iiI1 = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + iIiiiI1IiI1I1 + '/resources/art' , 'listpanel1.png' ) )
zip = plugintools . get_setting ( "path" )
net = net . Net ( )
I1I1i1I = pyxbmct . AddonDialogWindow ( ' ' )
if 30 - 30: iI1Ii1iI11iiI
if 89 - 89: II1I11i * OoOoO - o0I11iI + OoO0oo0OOOO00 + IIIIii1I
if 39 - 39: ii1Ii1I1Ii11i / I111I1Iiii1i + IIii11I1 - oOO0O00Oo0O0o
if 13 - 13: iI111iIIii
if 54 - 54: o0O0O0ooO / OOOOo0 - OooOO + i1IIi
if 61 - 61: IIii11I1 % o0O0O0ooO
if 98 - 98: II1I11i
if 57 - 57: II111iiii + i1IIi
def iIi1ii ( ) :
 global O0i1II1Iiii1I11
 global IiI111111IIII
 global i1Ii
 global ii111iI1iIi1
 global OOO
 global oo0OOo0
 global I11IiI
 global O0ooO0Oo00o
 global ooO0oOOooOo0
 global BuildsButton
 global Community
 global Collector
 global ToolsButton
 global CloseButton
 global InstallButton
 global InstallButton2
 global excaliburlist
 global excaliburthumb
 global fan
 global buildtextbox
 global buildtextbox2
 global buildtextbox3
 global comlist
 global apklist
 global colllist
 global ClearCache
 global ClearThumbs
 global Packages
 global SpeedTest
 global FreshStart
 global YTFix
 global VLog
 global XKill
 global APKI
 global Aux1
 global Aux2
 global BackLocation
 global CreateBackup
 global RestoreMyBackup
 global Random1
 global Random2
 global Random3
 global Random4
 global Random5
 global wsplash
 global FreshStart1
 global cachetextbox
 global packagestextbox
 global thumbstextbox
 global iptextbox
 global backuplabel
 global toolslabel
 global speedlabel
 global houselabel
 global speedthumb
 if 58 - 58: o0I11iI % OoO0oo0OOOO00
 if 50 - 50: OOOOo0 . OoO0oo0OOOO00
 if 97 - 97: O0 + o0I11iI
 if 89 - 89: OoO0oo0OOOO00 + OoOoO * IIii11I1 * oOO0O00Oo0O0o
 if 37 - 37: OoooooooOO - O0 - OoO0oo0OOOO00
 if 77 - 77: I111I1Iiii1i * iIii1I11I1II1
 if 98 - 98: iI1Ii1iI11iiI % oOO0O00Oo0O0o * OoooooooOO
 I1I1i1I . setGeometry ( 1240 , 650 , 100 , 50 )
 fan = pyxbmct . Image ( o0O0OOO0Ooo )
 I1I1i1I . placeControl ( fan , 0 , 0 , 120 , 51 )
 if 51 - 51: iIii1I11I1II1 . o0I11iI / ii1Ii1I1Ii11i + OoO0oo0OOOO00
 if 33 - 33: OooOO . II111iiii % iI111iIIii + OoO0oo0OOOO00
 if 71 - 71: II1I11i % I111I1Iiii1i
 if 98 - 98: IIii11I1 % i11iIiiIii % OooOO + oOO0O00Oo0O0o
 if 78 - 78: IIIIii1I % ii1Ii1I1Ii11i / iI111iIIii - iIii1I11I1II1
 if 69 - 69: OOOOo0
 if 11 - 11: iI1Ii1iI11iiI
 I1111i = pyxbmct . Image ( O0i1II1Iiii1I11 )
 iIIii = pyxbmct . Image ( IiI111111IIII )
 o00O0O = pyxbmct . Image ( i1Ii )
 ii1iii1i = pyxbmct . Image ( oo0OOo0 )
 wsplash = pyxbmct . Image ( ooO0oOOooOo0 )
 Iii1I1111ii = pyxbmct . Image ( ii111iI1iIi1 )
 ooOoO00 = pyxbmct . Image ( OOO )
 Ii1IIiI1i = pyxbmct . Image ( I11IiI )
 o0O00Oo0 = pyxbmct . Image ( O0ooO0Oo00o )
 BuildsButton = pyxbmct . Button ( 'Merlin Builds' , focusTexture = ooOOoooooo , noFocusTexture = II1I )
 Community = pyxbmct . Button ( 'Community' , focusTexture = ooOOoooooo , noFocusTexture = II1I )
 Collector = pyxbmct . Button ( 'Patches' , focusTexture = ooOOoooooo , noFocusTexture = II1I )
 ToolsButton = pyxbmct . Button ( 'Tool Box' , focusTexture = ooOOoooooo , noFocusTexture = II1I )
 CloseButton = pyxbmct . Button ( 'Exit' , focusTexture = iiIiI , noFocusTexture = II1I )
 InstallButton = pyxbmct . Button ( 'Install' , focusTexture = ooOOoooooo , noFocusTexture = II1I )
 InstallButton2 = pyxbmct . Button ( 'Install APK' , focusTexture = ooOOoooooo , noFocusTexture = II1I )
 excaliburlist = pyxbmct . List ( buttonFocusTexture = iii )
 excaliburthumb = pyxbmct . Image ( o0OOO )
 comlist = pyxbmct . List ( buttonFocusTexture = iii )
 apklist = pyxbmct . List ( buttonFocusTexture = iii )
 colllist = pyxbmct . List ( buttonFocusTexture = iii )
 buildtextbox = pyxbmct . Label ( '' , alignment = pyxbmct . ALIGN_LEFT , textColor = '0xFFFFFFFF' )
 buildtextbox2 = pyxbmct . Label ( '' , alignment = pyxbmct . ALIGN_LEFT , textColor = '0xFFFFFFFF' )
 buildtextbox3 = pyxbmct . Label ( '' , alignment = pyxbmct . ALIGN_LEFT , textColor = '0xFFFFFFFF' )
 ClearCache = pyxbmct . Button ( 'Clear Cache' , focusTexture = ooOOoooooo , noFocusTexture = II1I )
 ClearThumbs = pyxbmct . Button ( 'Delete Thumbnails' , focusTexture = ooOOoooooo , noFocusTexture = II1I )
 Packages = pyxbmct . Button ( 'Delete Packages' , focusTexture = ooOOoooooo , noFocusTexture = II1I )
 SpeedTest = pyxbmct . Button ( 'Test Now' , focusTexture = ooOOoooooo , noFocusTexture = II1I )
 FreshStart = pyxbmct . Button ( 'Fresh Start' , focusTexture = ooOOoooooo , noFocusTexture = II1I )
 FreshStart1 = pyxbmct . Button ( 'Fresh Start' , focusTexture = ooOOoooooo , noFocusTexture = II1I )
 YTFix = pyxbmct . Button ( 'YouTube Fix' , focusTexture = ooOOoooooo , noFocusTexture = II1I )
 Aux1 = pyxbmct . Button ( 'Debug' , focusTexture = ooOOoooooo , noFocusTexture = II1I )
 Aux2 = pyxbmct . Button ( 'Auto Clean' , focusTexture = ooOOoooooo , noFocusTexture = II1I )
 VLog = pyxbmct . Button ( 'View Log' , focusTexture = ooOOoooooo , noFocusTexture = II1I )
 XKill = pyxbmct . Button ( 'Force Close' , focusTexture = ooOOoooooo , noFocusTexture = II1I )
 APKI = pyxbmct . Button ( 'App Store' , focusTexture = ooOOoooooo , noFocusTexture = II1I )
 BackLocation = pyxbmct . Button ( 'Set Location' , focusTexture = ooOOoooooo , noFocusTexture = II1I )
 CreateBackup = pyxbmct . Button ( 'Backup' , focusTexture = ooOOoooooo , noFocusTexture = II1I )
 RestoreMyBackup = pyxbmct . Button ( 'Restore' , focusTexture = ooOOoooooo , noFocusTexture = II1I )
 Random1 = pyxbmct . Image ( i1I1ii11i1Iii )
 Random2 = pyxbmct . Image ( I1IiiiiI )
 Random3 = pyxbmct . Image ( o0OIiII )
 Random4 = pyxbmct . Image ( ii1iII1II )
 Random5 = pyxbmct . Image ( Iii1I1I11iiI1 )
 cachetextbox = pyxbmct . Label ( '[COLOR red]PENDING[/COLOR]' , alignment = pyxbmct . ALIGN_CENTER )
 packagestextbox = pyxbmct . Label ( '' , alignment = pyxbmct . ALIGN_CENTER )
 thumbstextbox = pyxbmct . Label ( '' , alignment = pyxbmct . ALIGN_CENTER )
 iptextbox = pyxbmct . Label ( '' , alignment = pyxbmct . ALIGN_CENTER )
 backuplabel = pyxbmct . Label ( '-----Backup/Restore Centre-----' , alignment = pyxbmct . ALIGN_CENTER )
 toolslabel = pyxbmct . Label ( '-----Tools-----' , alignment = pyxbmct . ALIGN_CENTER )
 speedlabel = pyxbmct . Label ( '-----Speed Test By Ookla-----' , alignment = pyxbmct . ALIGN_CENTER )
 houselabel = pyxbmct . Label ( '-----House Keeping-----' , alignment = pyxbmct . ALIGN_CENTER )
 speedthumb = pyxbmct . Image ( i1Iii1i1I )
 if 33 - 33: O0 * OoO0oo0OOOO00 - OOOOo0 % OOOOo0
 if 18 - 18: OOOOo0 / II1I11i * OOOOo0 + OOOOo0 * i11iIiiIii * IIIIii1I
 if 11 - 11: OooOO / o0I11iI - o0O0O0ooO * OoooooooOO + OoooooooOO . o0I11iI
 if 26 - 26: oOO0O00Oo0O0o % IIIIii1I
 if 76 - 76: o0O0O0ooO * iI111iIIii
 if 52 - 52: I111I1Iiii1i
 if 19 - 19: iI1Ii1iI11iiI
 I1I1i1I . placeControl ( I1111i , - 18 , - 2 , 145 , 55 )
 I1I1i1I . placeControl ( iIIii , 120 , - 3 , 10 , 56 )
 I1I1i1I . placeControl ( o00O0O , 0 , - 3 , 10 , 56 )
 I1I1i1I . placeControl ( ii1iii1i , - 20 , - 3 , 10 , 56 )
 I1I1i1I . placeControl ( wsplash , 10 , 1 , 110 , 49 )
 I1I1i1I . placeControl ( Iii1I1111ii , 0 , - 2 , 130 , 3 )
 I1I1i1I . placeControl ( ooOoO00 , - 14 , - 2 , 20 , 3 )
 I1I1i1I . placeControl ( Ii1IIiI1i , - 14 , 50 , 20 , 3 )
 I1I1i1I . placeControl ( o0O00Oo0 , 0 , 50 , 130 , 3 )
 I1I1i1I . placeControl ( Random1 , 4 , 0 , 120 , 16 )
 I1I1i1I . placeControl ( Random3 , 90 , 15 , 32 , 36 )
 I1I1i1I . placeControl ( Random4 , 105 , 2 , 17 , 11 )
 I1I1i1I . placeControl ( Random5 , 5 , 15 , 87 , 36 )
 I1I1i1I . placeControl ( BuildsButton , - 12 , 1 , 15 , 7 )
 I1I1i1I . placeControl ( Community , - 12 , 15 , 15 , 7 )
 I1I1i1I . placeControl ( Collector , - 12 , 8 , 15 , 7 )
 I1I1i1I . placeControl ( APKI , - 12 , 22 , 15 , 7 )
 I1I1i1I . placeControl ( ToolsButton , - 12 , 29 , 15 , 7 )
 I1I1i1I . placeControl ( CloseButton , - 12 , 37 , 15 , 13 )
 I1I1i1I . placeControl ( InstallButton , 21 , 20 , 10 , 7 )
 I1I1i1I . placeControl ( InstallButton2 , 21 , 20 , 10 , 7 )
 I1I1i1I . placeControl ( FreshStart1 , 32 , 20 , 10 , 7 )
 I1I1i1I . placeControl ( excaliburlist , 10 , 1 , 100 , 15 )
 I1I1i1I . placeControl ( excaliburthumb , 10 , 32 , 45 , 15 )
 I1I1i1I . placeControl ( comlist , 10 , 1 , 100 , 15 )
 I1I1i1I . placeControl ( apklist , 10 , 1 , 100 , 15 )
 I1I1i1I . placeControl ( colllist , 10 , 1 , 115 , 15 )
 I1I1i1I . placeControl ( buildtextbox , 110 , 17 , 15 , 33 )
 I1I1i1I . placeControl ( buildtextbox2 , 105 , 17 , 15 , 10 )
 I1I1i1I . placeControl ( buildtextbox3 , 95 , 17 , 15 , 33 )
 I1I1i1I . placeControl ( ClearCache , 75 , 23 , 15 , 9 )
 I1I1i1I . placeControl ( Packages , 75 , 32 , 15 , 9 )
 I1I1i1I . placeControl ( ClearThumbs , 75 , 41 , 15 , 9 )
 I1I1i1I . placeControl ( cachetextbox , 85 , 23 , 15 , 9 )
 I1I1i1I . placeControl ( packagestextbox , 85 , 32 , 15 , 9 )
 I1I1i1I . placeControl ( thumbstextbox , 85 , 41 , 15 , 9 )
 if 25 - 25: oOO0O00Oo0O0o / OooOO
 I1I1i1I . placeControl ( toolslabel , 2 , 36 , 20 , 14 )
 I1I1i1I . placeControl ( VLog , 15 , 36 , 10 , 7 )
 I1I1i1I . placeControl ( YTFix , 15 , 43 , 10 , 7 )
 I1I1i1I . placeControl ( FreshStart , 25 , 36 , 10 , 7 )
 I1I1i1I . placeControl ( XKill , 25 , 43 , 10 , 7 )
 I1I1i1I . placeControl ( Aux1 , 35 , 36 , 10 , 7 )
 I1I1i1I . placeControl ( Aux2 , 35 , 43 , 10 , 7 )
 if 31 - 31: I111I1Iiii1i . O0 % iI1Ii1iI11iiI . OoO0oo0OOOO00 + o0O0O0ooO
 I1I1i1I . placeControl ( BackLocation , 105 , 23 , 15 , 9 )
 I1I1i1I . placeControl ( CreateBackup , 105 , 32 , 15 , 9 )
 I1I1i1I . placeControl ( RestoreMyBackup , 105 , 41 , 15 , 9 )
 I1I1i1I . placeControl ( iptextbox , 70 , 1 , 8 , 22 )
 I1I1i1I . placeControl ( backuplabel , 92 , 23 , 20 , 27 )
 I1I1i1I . placeControl ( houselabel , 62 , 23 , 20 , 27 )
 if 71 - 71: OOOOo0 . II111iiii
 I1I1i1I . placeControl ( Random2 , 75 , 1 , 45 , 22 )
 I1I1i1I . placeControl ( speedthumb , 75 , 1 , 45 , 22 )
 I1I1i1I . placeControl ( SpeedTest , 65 , 2 , 10 , 7 )
 I1I1i1I . placeControl ( speedlabel , 62 , 10 , 20 , 12 )
 if 62 - 62: OoooooooOO . IIii11I1
 if 61 - 61: o0I11iI - I111I1Iiii1i - i1IIi
 if 25 - 25: O0 * IIii11I1 + IIIIii1I . OoO0oo0OOOO00 . OoO0oo0OOOO00
 if 58 - 58: iI1Ii1iI11iiI
 if 53 - 53: i1IIi
 if 59 - 59: OoO0oo0OOOO00
 if 81 - 81: o0I11iI - o0I11iI . iI111iIIii
 I1I1i1I . connect ( BuildsButton , o0OoOo00o0o )
 I1I1i1I . connect ( Community , I1II1I11I1I )
 I1I1i1I . connect ( Collector , OoOO0o )
 I1I1i1I . connect ( ToolsButton , i1II1 )
 I1I1i1I . connect ( CloseButton , I1I1i1I . close )
 I1I1i1I . connect ( InstallButton , lambda : i11i1 ( url ) )
 I1I1i1I . connect ( InstallButton2 , IiiiiI1i1Iii )
 I1I1i1I . connect ( ClearCache , oo00oO0o )
 I1I1i1I . connect ( ClearThumbs , iiii111II )
 I1I1i1I . connect ( Packages , I11iIiI1I1i11 )
 I1I1i1I . connect ( SpeedTest , OOoooO00o0oo0 )
 I1I1i1I . connect ( FreshStart , O00O )
 I1I1i1I . connect ( FreshStart1 , O00O )
 I1I1i1I . connect ( YTFix , I1i11 )
 I1I1i1I . connect ( Aux1 , IiIi1I1 )
 I1I1i1I . connect ( Aux2 , IiIIi1 )
 I1I1i1I . connect ( VLog , IIIIiii1IIii )
 I1I1i1I . connect ( XKill , II1i11I )
 I1I1i1I . connect ( BackLocation , IiIIi1 )
 I1I1i1I . connect ( CreateBackup , lambda : wiz . backUpOptions ( 'build' ) )
 I1I1i1I . connect ( RestoreMyBackup , lambda : ii1I1IIii11 ( type ) )
 I1I1i1I . connect ( APKI , O0o0oO )
 if 38 - 38: ii1Ii1I1Ii11i % o0I11iI + IIIIii1I . i11iIiiIii
 I1I1i1I . setFocus ( BuildsButton )
 I1I1i1I . connectEventList (
 [ pyxbmct . ACTION_MOVE_DOWN ,
 pyxbmct . ACTION_MOVE_UP ,
 pyxbmct . ACTION_MOUSE_MOVE ] ,
 oo0000ooooO0o )
 if 40 - 40: IIIIii1I + i1IIi * I111I1Iiii1i
 if 85 - 85: oOO0O00Oo0O0o * II1I11i . O0 - i11iIiiIii
 if 18 - 18: oOO0O00Oo0O0o + o0O0O0ooO - O0
 if 53 - 53: i1IIi
 if 87 - 87: i11iIiiIii + OOOOo0 . IIIIii1I * OOOOo0 . OooOO / IIIIii1I
 if 76 - 76: O0 + i1IIi . II1I11i * iI1Ii1iI11iiI * oOO0O00Oo0O0o
 if 14 - 14: OoO0oo0OOOO00 % O0 * iI111iIIii + oOO0O00Oo0O0o + II1I11i * oOO0O00Oo0O0o
 BuildsButton . controlRight ( Collector )
 BuildsButton . controlLeft ( CloseButton )
 BuildsButton . controlDown ( excaliburlist )
 Collector . controlRight ( Community )
 Collector . controlLeft ( BuildsButton )
 Collector . controlDown ( colllist )
 Community . controlRight ( APKI )
 Community . controlLeft ( Collector )
 Community . controlDown ( comlist )
 APKI . controlRight ( ToolsButton )
 APKI . controlLeft ( Community )
 ToolsButton . controlRight ( CloseButton )
 ToolsButton . controlLeft ( APKI )
 CloseButton . controlRight ( BuildsButton )
 CloseButton . controlLeft ( ToolsButton )
 iII1I1IiI11ii ( )
 if 72 - 72: iI1Ii1iI11iiI % i11iIiiIii . II1I11i / II111iiii
 if 14 - 14: IIIIii1I + OoOoO
 if 3 - 3: IIIIii1I . II1I11i / II111iiii
 if 39 - 39: OOOOo0
 if 91 - 91: OoooooooOO - iIii1I11I1II1 + o0I11iI / OoOoO . o0I11iI + O0
 if 26 - 26: IIIIii1I - OoooooooOO
 if 11 - 11: iI1Ii1iI11iiI * ii1Ii1I1Ii11i
def iII1I1IiI11ii ( ) :
 InstallButton . setVisible ( False )
 InstallButton2 . setVisible ( False )
 excaliburlist . setVisible ( False )
 excaliburthumb . setVisible ( False )
 comlist . setVisible ( False )
 apklist . setVisible ( False )
 colllist . setVisible ( False )
 buildtextbox . setVisible ( False )
 buildtextbox2 . setVisible ( False )
 buildtextbox3 . setVisible ( False )
 ClearCache . setVisible ( False )
 ClearThumbs . setVisible ( False )
 Packages . setVisible ( False )
 SpeedTest . setVisible ( False )
 FreshStart . setVisible ( False )
 FreshStart1 . setVisible ( False )
 YTFix . setVisible ( False )
 Aux1 . setVisible ( False )
 Aux2 . setVisible ( False )
 VLog . setVisible ( False )
 XKill . setVisible ( False )
 BackLocation . setVisible ( False )
 CreateBackup . setVisible ( False )
 RestoreMyBackup . setVisible ( False )
 Random1 . setVisible ( False )
 Random2 . setVisible ( False )
 Random3 . setVisible ( False )
 Random4 . setVisible ( False )
 Random5 . setVisible ( False )
 cachetextbox . setVisible ( False )
 packagestextbox . setVisible ( False )
 thumbstextbox . setVisible ( False )
 iptextbox . setVisible ( False )
 backuplabel . setVisible ( False )
 toolslabel . setVisible ( False )
 speedlabel . setVisible ( False )
 houselabel . setVisible ( False )
 speedthumb . setVisible ( False )
 if 81 - 81: iI111iIIii + o0O0O0ooO
 if 98 - 98: iI1Ii1iI11iiI
 if 95 - 95: OooOO / OooOO
 if 30 - 30: IIIIii1I + II1I11i / II1I11i % IIIIii1I . IIIIii1I
 if 55 - 55: OooOO - IIii11I1 + II111iiii + iI111iIIii % oOO0O00Oo0O0o
 if 41 - 41: i1IIi - IIii11I1 - oOO0O00Oo0O0o
 if 8 - 8: OoOoO + OOOOo0 - OoO0oo0OOOO00 % II1I11i % OoO0oo0OOOO00 * ii1Ii1I1Ii11i
def i1II1 ( ) :
 iII1I1IiI11ii ( )
 fan . setImage ( OOO00O0O )
 ClearCache . setVisible ( True )
 ClearThumbs . setVisible ( True )
 Packages . setVisible ( True )
 Random2 . setVisible ( True )
 Random3 . setVisible ( False )
 Random4 . setVisible ( False )
 Random5 . setVisible ( False )
 wsplash . setVisible ( False )
 SpeedTest . setVisible ( True )
 FreshStart . setVisible ( True )
 YTFix . setVisible ( True )
 Aux1 . setVisible ( True )
 Aux2 . setVisible ( True )
 VLog . setVisible ( True )
 XKill . setVisible ( True )
 BackLocation . setVisible ( True )
 CreateBackup . setVisible ( True )
 RestoreMyBackup . setVisible ( True )
 excaliburthumb . setVisible ( False )
 cachetextbox . setVisible ( True )
 packagestextbox . setVisible ( True )
 thumbstextbox . setVisible ( True )
 iptextbox . setVisible ( True )
 backuplabel . setVisible ( True )
 speedlabel . setVisible ( True )
 toolslabel . setVisible ( True )
 houselabel . setVisible ( True )
 speedthumb . setVisible ( True )
 IIIi11I11 = iIIII ( oOooOOOoOo )
 iIIIiiI1i1i = iIIII ( OOoO00 )
 packagestextbox . setLabel ( IIIi11I11 )
 thumbstextbox . setLabel ( iIIIiiI1i1i )
 excaliburthumb . setImage ( o0OOO )
 iIII = 1
 o0o0O = re . compile ( "<td width='80'>(.+?)</td><td>(.+?)</td><td>(.+?)</td><td>.+?</td><td>(.+?)</td>" ) . findall ( net . http_GET ( 'http://www.iplocation.net/' ) . content )
 for ooooO0oOoOOoO , I1i11i , IiIi , OOOOO0O00 in o0o0O :
  if iIII < 2 :
   Iii = '[COLOR red]Your IP Address is: ' + ooooO0oOoOOoO + '\n' + 'Your IP is based in: ' + IiIi + '[/COLOR]'
   iptextbox . setLabel ( Iii )
  iIII = iIII + 1
  if 31 - 31: OoO0oo0OOOO00 % OoOoO
  if 14 - 14: ii1Ii1I1Ii11i / ii1Ii1I1Ii11i % OooOO
  if 56 - 56: iI1Ii1iI11iiI . O0 + II1I11i
  if 1 - 1: iI111iIIii
  if 97 - 97: I111I1Iiii1i + iI111iIIii + O0 + i11iIiiIii
  if 77 - 77: OoO0oo0OOOO00 / OoooooooOO
 ToolsButton . controlDown ( VLog )
 if 46 - 46: OoO0oo0OOOO00 % iIii1I11I1II1 . iI111iIIii % iI111iIIii + i11iIiiIii
 ClearCache . controlUp ( VLog )
 ClearCache . controlDown ( BackLocation )
 ClearCache . controlRight ( Packages )
 ClearCache . controlLeft ( SpeedTest )
 if 72 - 72: iIii1I11I1II1 * oOO0O00Oo0O0o % OooOO / OoOoO
 Packages . controlUp ( VLog )
 Packages . controlDown ( CreateBackup )
 Packages . controlRight ( ClearThumbs )
 Packages . controlLeft ( ClearCache )
 if 35 - 35: OooOO + i1IIi % IIIIii1I % IIii11I1 + ii1Ii1I1Ii11i
 ClearThumbs . controlUp ( VLog )
 ClearThumbs . controlDown ( RestoreMyBackup )
 ClearThumbs . controlLeft ( Packages )
 if 17 - 17: i1IIi
 SpeedTest . controlUp ( VLog )
 SpeedTest . controlDown ( ClearCache )
 SpeedTest . controlRight ( ClearCache )
 if 21 - 21: II1I11i
 FreshStart . controlUp ( VLog )
 FreshStart . controlDown ( Aux1 )
 FreshStart . controlRight ( XKill )
 if 29 - 29: IIii11I1 / II111iiii / OooOO * I111I1Iiii1i
 BackLocation . controlUp ( ClearCache )
 BackLocation . controlRight ( CreateBackup )
 BackLocation . controlLeft ( SpeedTest )
 if 10 - 10: OOOOo0 % o0O0O0ooO * o0O0O0ooO . IIii11I1 / oOO0O00Oo0O0o % I111I1Iiii1i
 CreateBackup . controlRight ( RestoreMyBackup )
 CreateBackup . controlUp ( Packages )
 CreateBackup . controlLeft ( BackLocation )
 if 49 - 49: OoOoO / ii1Ii1I1Ii11i + O0 * OoO0oo0OOOO00
 RestoreMyBackup . controlLeft ( CreateBackup )
 RestoreMyBackup . controlUp ( ClearThumbs )
 if 28 - 28: OooOO + i11iIiiIii / IIii11I1 % o0I11iI % II1I11i - O0
 YTFix . controlUp ( ToolsButton )
 YTFix . controlDown ( XKill )
 YTFix . controlLeft ( VLog )
 if 54 - 54: i1IIi + II111iiii
 VLog . controlUp ( ToolsButton )
 VLog . controlDown ( FreshStart )
 VLog . controlRight ( YTFix )
 if 83 - 83: IIIIii1I - iI1Ii1iI11iiI + I111I1Iiii1i
 XKill . controlLeft ( FreshStart )
 XKill . controlUp ( YTFix )
 XKill . controlDown ( Aux2 )
 if 5 - 5: oOO0O00Oo0O0o
 Aux1 . controlRight ( Aux2 )
 Aux1 . controlUp ( FreshStart )
 Aux1 . controlDown ( SpeedTest )
 if 46 - 46: o0O0O0ooO
 Aux2 . controlLeft ( Aux1 )
 Aux2 . controlUp ( XKill )
 Aux2 . controlDown ( SpeedTest )
 if 45 - 45: OooOO
 if 21 - 21: ii1Ii1I1Ii11i . OOOOo0 . I111I1Iiii1i / II1I11i / OOOOo0
 if 17 - 17: I111I1Iiii1i / I111I1Iiii1i / IIii11I1
 if 1 - 1: i1IIi . i11iIiiIii % I111I1Iiii1i
 if 82 - 82: iIii1I11I1II1 + II1I11i . iIii1I11I1II1 % o0O0O0ooO / oOO0O00Oo0O0o . oOO0O00Oo0O0o
 if 14 - 14: OoO0oo0OOOO00 . I111I1Iiii1i . IIii11I1 + OoooooooOO - I111I1Iiii1i + o0O0O0ooO
 if 9 - 9: oOO0O00Oo0O0o
def I1II1I11I1I ( ) :
 iII1I1IiI11ii ( )
 fan . setImage ( o00oooO0Oo )
 comlist . reset ( )
 comlist . setVisible ( True )
 excaliburthumb . setVisible ( True )
 Random1 . setVisible ( True )
 Random3 . setVisible ( True )
 Random4 . setVisible ( True )
 Random5 . setVisible ( True )
 wsplash . setVisible ( False )
 InstallButton . setVisible ( True )
 InstallButton2 . setVisible ( False )
 FreshStart1 . setVisible ( True )
 buildtextbox . setVisible ( True )
 buildtextbox2 . setVisible ( True )
 buildtextbox3 . setVisible ( True )
 excaliburthumb . setImage ( o0OOO )
 oooooOOO000Oo = net . http_GET ( 'http://mrepo.uk/data/community.txt' ) . content . replace ( '\n' , '' ) . replace ( '\r' , '' )
 o0o0O = re . compile ( 'name="(.+?)"' ) . findall ( oooooOOO000Oo )
 for Ooo00OoOOO in o0o0O :
  Ooo00OoOOO = '[COLOR white]' + Ooo00OoOOO + '[/COLOR]'
  comlist . addItem ( Ooo00OoOOO )
 Community . controlDown ( comlist )
 comlist . controlUp ( Community )
 comlist . controlLeft ( Community )
 InstallButton . controlDown ( FreshStart1 )
 FreshStart1 . controlUp ( InstallButton )
 FreshStart1 . controlLeft ( comlist )
 FreshStart1 . controlLeft ( comlist )
 if 98 - 98: iIii1I11I1II1 * IIIIii1I * I111I1Iiii1i + OooOO % i11iIiiIii % O0
 if 27 - 27: O0
 if 79 - 79: OoO0oo0OOOO00 - IIii11I1 + OoO0oo0OOOO00 . ii1Ii1I1Ii11i
 if 28 - 28: i1IIi - iI111iIIii
 if 54 - 54: iI111iIIii - O0 % I111I1Iiii1i
 if 73 - 73: O0 . o0I11iI + iI1Ii1iI11iiI - IIii11I1 % IIii11I1 . IIii11I1
 if 17 - 17: oOO0O00Oo0O0o - OoooooooOO % oOO0O00Oo0O0o . o0O0O0ooO / i11iIiiIii % iI111iIIii
def O0o0oO ( ) :
 iII1I1IiI11ii ( )
 fan . setImage ( o00oooO0Oo )
 apklist . reset ( )
 apklist . setVisible ( True )
 excaliburthumb . setVisible ( True )
 Random1 . setVisible ( True )
 Random3 . setVisible ( True )
 Random4 . setVisible ( True )
 Random5 . setVisible ( True )
 wsplash . setVisible ( False )
 InstallButton . setVisible ( False )
 InstallButton2 . setVisible ( True )
 FreshStart1 . setVisible ( False )
 buildtextbox . setVisible ( True )
 buildtextbox2 . setVisible ( True )
 buildtextbox3 . setVisible ( True )
 excaliburthumb . setImage ( o0OOO )
 oooooOOO000Oo = net . http_GET ( 'http://mrepo.uk/data/apk.txt' ) . content . replace ( '\n' , '' ) . replace ( '\r' , '' )
 o0o0O = re . compile ( 'name="(.+?)"' ) . findall ( oooooOOO000Oo )
 for Ooo00OoOOO in o0o0O :
  Ooo00OoOOO = '[COLOR white]' + Ooo00OoOOO + '[/COLOR]'
  apklist . addItem ( Ooo00OoOOO )
 APKI . controlDown ( apklist )
 apklist . controlUp ( APKI )
 apklist . controlLeft ( APKI )
 InstallButton2 . controlDown ( FreshStart1 )
 FreshStart1 . controlUp ( InstallButton2 )
 FreshStart1 . controlLeft ( apklist )
 FreshStart1 . controlLeft ( apklist )
 if 28 - 28: IIii11I1
 if 58 - 58: o0I11iI
 if 37 - 37: II1I11i - iIii1I11I1II1 / IIIIii1I
 if 73 - 73: i11iIiiIii - o0O0O0ooO
 if 25 - 25: OoooooooOO + o0O0O0ooO * IIIIii1I
 if 92 - 92: iI1Ii1iI11iiI + IIii11I1 + O0 / OoO0oo0OOOO00 + OOOOo0
 if 18 - 18: OooOO * o0I11iI . iI111iIIii / IIIIii1I / i11iIiiIii
def OoOO0o ( ) :
 iII1I1IiI11ii ( )
 fan . setImage ( o00oooO0Oo )
 colllist . reset ( )
 colllist . setVisible ( True )
 excaliburthumb . setVisible ( True )
 Random1 . setVisible ( True )
 Random3 . setVisible ( True )
 Random4 . setVisible ( True )
 Random5 . setVisible ( True )
 wsplash . setVisible ( False )
 InstallButton . setVisible ( True )
 InstallButton2 . setVisible ( False )
 buildtextbox . setVisible ( True )
 buildtextbox2 . setVisible ( True )
 buildtextbox3 . setVisible ( True )
 excaliburthumb . setImage ( o0OOO )
 oooooOOO000Oo = net . http_GET ( 'http://mrepo.uk/data/patch.txt' ) . content . replace ( '\n' , '' ) . replace ( '\r' , '' )
 o0o0O = re . compile ( 'name="(.+?)"' ) . findall ( oooooOOO000Oo )
 for Ooo00OoOOO in o0o0O :
  Ooo00OoOOO = '[COLOR white]' + Ooo00OoOOO + '[/COLOR]'
  colllist . addItem ( Ooo00OoOOO )
 Collector . controlDown ( colllist )
 colllist . controlUp ( Collector )
 colllist . controlLeft ( Collector )
 colllist . controlRight ( InstallButton )
 InstallButton . controlLeft ( colllist )
 if 21 - 21: ii1Ii1I1Ii11i / IIIIii1I + oOO0O00Oo0O0o + OoooooooOO
 if 91 - 91: i11iIiiIii / i1IIi + iI111iIIii + OooOO * i11iIiiIii
 if 66 - 66: iIii1I11I1II1 % i1IIi - O0 + IIii11I1 * OOOOo0 . o0O0O0ooO
 if 52 - 52: OooOO + O0 . iI111iIIii . IIIIii1I . OoOoO
 if 97 - 97: iI1Ii1iI11iiI / iI111iIIii
 if 71 - 71: II111iiii / i1IIi . IIIIii1I % OoooooooOO . o0I11iI
 if 41 - 41: i1IIi * II111iiii / OoooooooOO . I111I1Iiii1i
def o0OoOo00o0o ( ) :
 iII1I1IiI11ii ( )
 fan . setImage ( o00oooO0Oo )
 excaliburlist . reset ( )
 excaliburlist . setVisible ( True )
 excaliburthumb . setVisible ( True )
 Random1 . setVisible ( True )
 Random3 . setVisible ( True )
 Random4 . setVisible ( True )
 Random5 . setVisible ( True )
 wsplash . setVisible ( False )
 InstallButton . setVisible ( True )
 InstallButton2 . setVisible ( False )
 FreshStart1 . setVisible ( True )
 buildtextbox . setVisible ( True )
 buildtextbox2 . setVisible ( True )
 buildtextbox3 . setVisible ( True )
 excaliburthumb . setImage ( o0OOO )
 oooooOOO000Oo = net . http_GET ( 'http://mrepo.uk/data/merlin.txt' ) . content . replace ( '\n' , '' ) . replace ( '\r' , '' )
 o0o0O = re . compile ( 'name="(.+?)"' ) . findall ( oooooOOO000Oo )
 for Ooo00OoOOO in o0o0O :
  Ooo00OoOOO = '[COLOR white]' + Ooo00OoOOO + '[/COLOR]'
  excaliburlist . addItem ( Ooo00OoOOO )
 BuildsButton . controlDown ( excaliburlist )
 excaliburlist . controlUp ( BuildsButton )
 excaliburlist . controlLeft ( BuildsButton )
 InstallButton . controlDown ( FreshStart1 )
 FreshStart1 . controlUp ( InstallButton )
 FreshStart1 . controlLeft ( excaliburlist )
 if 83 - 83: iI111iIIii . O0 / II1I11i / I111I1Iiii1i - II111iiii
 if 100 - 100: OoOoO
 if 46 - 46: o0I11iI / iIii1I11I1II1 % iI111iIIii . iIii1I11I1II1 * iI111iIIii
 if 38 - 38: IIIIii1I - iI111iIIii / O0 . OOOOo0
 if 45 - 45: OOOOo0
 if 83 - 83: o0I11iI . OoooooooOO
 if 58 - 58: i11iIiiIii + OoooooooOO % OoooooooOO / o0O0O0ooO / i11iIiiIii
def oo0000ooooO0o ( ) :
 global url
 try :
  if I1I1i1I . getFocus ( ) == excaliburlist :
   oOOoo = excaliburlist . getSelectedPosition ( )
   oooooOOO000Oo = net . http_GET ( 'http://mrepo.uk/data/merlin.txt' ) . content . replace ( '\n' , '' ) . replace ( '\r' , '' )
   iII1111III1I = re . compile ( 'img="(.+?)"' ) . findall ( oooooOOO000Oo ) [ oOOoo ]
   excaliburthumb . setImage ( iII1111III1I )
   url = re . compile ( 'url="(.+?)"' ) . findall ( oooooOOO000Oo ) [ oOOoo ]
   Ooo00OoOOO = re . compile ( 'name="(.+?)"' ) . findall ( oooooOOO000Oo ) [ oOOoo ]
   ii11i = re . compile ( 'size="(.+?)"' ) . findall ( oooooOOO000Oo ) [ oOOoo ]
   O00oOo00o0o = re . compile ( 'description="(.+?)"' ) . findall ( oooooOOO000Oo ) [ oOOoo ]
   O00oO0 = re . compile ( 'bio="(.+?)"' ) . findall ( oooooOOO000Oo ) [ oOOoo ]
   buildtextbox . setLabel ( O00oOo00o0o )
   buildtextbox2 . setLabel ( ii11i )
   buildtextbox3 . setLabel ( O00oO0 )
   excaliburlist . controlRight ( InstallButton )
   InstallButton . controlLeft ( excaliburlist )
  elif I1I1i1I . getFocus ( ) == comlist :
   oOOoo = comlist . getSelectedPosition ( )
   oooooOOO000Oo = net . http_GET ( 'http://mrepo.uk/data/community.txt' ) . content . replace ( '\n' , '' ) . replace ( '\r' , '' )
   O0Oo00OoOo = re . compile ( 'img="(.+?)"' ) . findall ( oooooOOO000Oo ) [ oOOoo ]
   excaliburthumb . setImage ( O0Oo00OoOo )
   url = re . compile ( 'url="(.+?)"' ) . findall ( oooooOOO000Oo ) [ oOOoo ]
   Ooo00OoOOO = re . compile ( 'name="(.+?)"' ) . findall ( oooooOOO000Oo ) [ oOOoo ]
   ii11i = re . compile ( 'size="(.+?)"' ) . findall ( oooooOOO000Oo ) [ oOOoo ]
   O00oOo00o0o = re . compile ( 'description="(.+?)"' ) . findall ( oooooOOO000Oo ) [ oOOoo ]
   O00oO0 = re . compile ( 'bio="(.+?)"' ) . findall ( oooooOOO000Oo ) [ oOOoo ]
   buildtextbox . setLabel ( O00oOo00o0o )
   buildtextbox2 . setLabel ( ii11i )
   buildtextbox3 . setLabel ( O00oO0 )
   comlist . controlRight ( InstallButton )
   InstallButton . controlLeft ( comlist )
  elif I1I1i1I . getFocus ( ) == colllist :
   oOOoo = colllist . getSelectedPosition ( )
   oooooOOO000Oo = net . http_GET ( 'http://mrepo.uk/data/patch.txt' ) . content . replace ( '\n' , '' ) . replace ( '\r' , '' )
   O0Oo00OoOo = re . compile ( 'img="(.+?)"' ) . findall ( oooooOOO000Oo ) [ oOOoo ]
   excaliburthumb . setImage ( O0Oo00OoOo )
   url = re . compile ( 'url="(.+?)"' ) . findall ( oooooOOO000Oo ) [ oOOoo ]
   Ooo00OoOOO = re . compile ( 'name="(.+?)"' ) . findall ( oooooOOO000Oo ) [ oOOoo ]
   ii11i = re . compile ( 'size="(.+?)"' ) . findall ( oooooOOO000Oo ) [ oOOoo ]
   O00oOo00o0o = re . compile ( 'description="(.+?)"' ) . findall ( oooooOOO000Oo ) [ oOOoo ]
   O00oO0 = re . compile ( 'bio="(.+?)"' ) . findall ( oooooOOO000Oo ) [ oOOoo ]
   buildtextbox . setLabel ( O00oOo00o0o )
   buildtextbox2 . setLabel ( ii11i )
   buildtextbox3 . setLabel ( O00oO0 )
   colllist . controlRight ( InstallButton )
   InstallButton . controlLeft ( colllist )
  elif I1I1i1I . getFocus ( ) == apklist :
   oOOoo = apklist . getSelectedPosition ( )
   oooooOOO000Oo = net . http_GET ( 'http://mrepo.uk/data/apk.txt' ) . content . replace ( '\n' , '' ) . replace ( '\r' , '' )
   O0Oo00OoOo = re . compile ( 'img="(.+?)"' ) . findall ( oooooOOO000Oo ) [ oOOoo ]
   excaliburthumb . setImage ( O0Oo00OoOo )
   url = re . compile ( 'url="(.+?)"' ) . findall ( oooooOOO000Oo ) [ oOOoo ]
   Ooo00OoOOO = re . compile ( 'name="(.+?)"' ) . findall ( oooooOOO000Oo ) [ oOOoo ]
   ii11i = re . compile ( 'size="(.+?)"' ) . findall ( oooooOOO000Oo ) [ oOOoo ]
   O00oOo00o0o = re . compile ( 'description="(.+?)"' ) . findall ( oooooOOO000Oo ) [ oOOoo ]
   O00oO0 = re . compile ( 'bio="(.+?)"' ) . findall ( oooooOOO000Oo ) [ oOOoo ]
   buildtextbox . setLabel ( O00oOo00o0o )
   buildtextbox2 . setLabel ( ii11i )
   buildtextbox3 . setLabel ( O00oO0 )
   apklist . controlRight ( InstallButton2 )
   InstallButton2 . controlLeft ( apklist )
  else : pass
 except : pass
 if 24 - 24: i11iIiiIii - OOOOo0
 if 21 - 21: IIii11I1
 if 92 - 92: i11iIiiIii / OOOOo0 - iI111iIIii % OooOO * OOOOo0 + II1I11i
 if 11 - 11: OoooooooOO . OOOOo0
 if 80 - 80: OoooooooOO - I111I1Iiii1i * oOO0O00Oo0O0o * IIIIii1I / iI1Ii1iI11iiI / I111I1Iiii1i
 if 13 - 13: OOOOo0 * OooOO + i11iIiiIii * OOOOo0 - OooOO
 if 23 - 23: iIii1I11I1II1 * i1IIi % OoooooooOO * o0O0O0ooO
def i11i1 ( url ) :
 I1Iiiiiii = Oo . yesno ( '[COLOR aqua]Merlin Wizard[/COLOR]' , 'For A Successful Installation' , 'Ensure You Have Cleared Data First' , 'Do You Wish To Continue?' , 'Cancel' , 'Continue' )
 if I1Iiiiiii == 1 :
  I1IIIiI1I1ii1 = xbmc . translatePath ( os . path . join ( 'special://home/addons' , 'packages' ) )
  iiiI1I1iIIIi1 = xbmcgui . DialogProgress ( )
  iiiI1I1iIIIi1 . create ( "[COLOR aqua]Merlin Wizard[/COLOR]" , "Installing Build" , '' , 'Please Wait' )
  IiiI1iiiiI1iI = os . path . join ( I1IIIiI1I1ii1 , 'Build.zip' )
  try :
   os . remove ( IiiI1iiiiI1iI )
  except :
   pass
  downloader . download ( url , IiiI1iiiiI1iI , iiiI1I1iIIIi1 )
  iIiiiii1i = xbmc . translatePath ( os . path . join ( 'special://' , 'home' ) )
  iiiI1I1iIIIi1 . update ( 0 , "" , "[COLOR aqua]Finalizing Install[/COLOR]" )
  extract . all ( IiiI1iiiiI1iI , iIiiiii1i , iiiI1I1iIIIi1 )
  try :
   os . remove ( IiiI1iiiiI1iI )
  except :
   pass
  Oo . ok ( '[COLOR aqua]Merlin Wizard[/COLOR]' , '[COLOR yellow]Installation Complete[/COLOR]' , '[COLOR yellow]Please Press OK To Reboot Or Force Close Now![/COLOR]' )
  iiIi1IIiI ( )
 else : quit ( )
 if 23 - 23: oOO0O00Oo0O0o . I111I1Iiii1i
 if 9 - 9: OooOO - IIIIii1I - iI111iIIii
 if 82 - 82: o0O0O0ooO - o0O0O0ooO + o0I11iI
 if 8 - 8: OoO0oo0OOOO00 % iI111iIIii * ii1Ii1I1Ii11i % oOO0O00Oo0O0o . OooOO / OooOO
 if 81 - 81: OoOoO
 if 99 - 99: ii1Ii1I1Ii11i * II111iiii * OOOOo0
 if 92 - 92: II1I11i
def iiIi1IIiI ( ) :
 iI11I = ooO000 ( )
 if iI11I == 'osx' :
  try : os . _exit ( 1 )
  except : pass
  try : os . system ( 'killall -9 XBMC' )
  except : pass
  try : os . system ( 'killall -9 Kodi' )
  except : pass
  Oo . ok ( "[COLOR red]Excalibur[/COLOR]" , "Excalibur configuration prepared" , "[COLOR red]PLEASE DISCONNECT THE POWER FROM YOUR DEVICE[/COLOR]" )
 elif iI11I == 'linux' :
  try : os . _exit ( 1 )
  except : pass
  try : os . system ( 'killall XBMC' )
  except : pass
  try : os . system ( 'killall Kodi' )
  except : pass
  try : os . system ( 'killall -9 xbmc.bin' )
  except : pass
  try : os . system ( 'killall -9 kodi.bin' )
  except : pass
  Oo . ok ( "[COLOR red]Excalibur[/COLOR]" , "Excalibur configuration prepared" , "[COLOR red]PLEASE DISCONNECT THE POWER FROM YOUR DEVICE[/COLOR]" )
 elif iI11I == 'android' :
  try : os . _exit ( 1 )
  except : pass
  try : os . system ( 'adb shell am force-stop org.xbmc.kodi' )
  except : pass
  try : os . system ( 'adb shell am force-stop org.kodi' )
  except : pass
  try : os . system ( 'adb shell am force-stop org.xbmc.xbmc' )
  except : pass
  try : os . system ( 'adb shell am force-stop org.xbmc' )
  except : pass
  try : os . system ( 'adb shell am force-stop com.semperpax.spmc' )
  except : pass
  Oo . ok ( "[COLOR red]Excalibur[/COLOR]" , "Excalibur configuration prepared" , "[COLOR red]PLEASE DISCONNECT THE POWER FROM YOUR DEVICE[/COLOR]" )
 elif iI11I == 'windows' :
  try : os . _exit ( 1 )
  except : pass
  try :
   os . system ( '@ECHO off' )
   os . system ( 'tskill XBMC.exe' )
  except : pass
  try :
   os . system ( '@ECHO off' )
   os . system ( 'tskill Kodi.exe' )
  except : pass
  try :
   os . system ( '@ECHO off' )
   os . system ( 'TASKKILL /im Kodi.exe /f' )
  except : pass
  try :
   os . system ( '@ECHO off' )
   os . system ( 'TASKKILL /im XBMC.exe /f' )
  except : pass
  Oo . ok ( "[COLOR red]Excalibur[/COLOR]" , "Excalibur configuration prepared" , "[COLOR red]PLEASE DISCONNECT THE POWER FROM YOUR DEVICE[/COLOR]" )
 else :
  try : os . _exit ( 1 )
  except : pass
  try : os . system ( 'killall AppleTV' )
  except : pass
  try : os . system ( 'sudo initctl stop kodi' )
  except : pass
  try : os . system ( 'sudo initctl stop xbmc' )
  except : pass
  Oo . ok ( "[COLOR red]Excalibur[/COLOR]" , "Excalibur configuration prepared" , "[COLOR red]PLEASE DISCONNECT THE POWER FROM YOUR DEVICE[/COLOR]" )
  if 57 - 57: II111iiii
  if 54 - 54: II1I11i + ii1Ii1I1Ii11i + i11iIiiIii
  if 28 - 28: ii1Ii1I1Ii11i
  if 70 - 70: o0O0O0ooO
  if 34 - 34: OOOOo0 % o0O0O0ooO
  if 3 - 3: II111iiii / I111I1Iiii1i + o0O0O0ooO . OooOO . OoOoO
  if 83 - 83: ii1Ii1I1Ii11i + OoooooooOO
def ooO000 ( ) :
 if xbmc . getCondVisibility ( 'system.platform.android' ) :
  return 'android'
 elif xbmc . getCondVisibility ( 'system.platform.linux' ) :
  return 'linux'
 elif xbmc . getCondVisibility ( 'system.platform.windows' ) :
  return 'windows'
 elif xbmc . getCondVisibility ( 'system.platform.osx' ) :
  return 'osx'
 elif xbmc . getCondVisibility ( 'system.platform.atv2' ) :
  return 'atv2'
 elif xbmc . getCondVisibility ( 'system.platform.ios' ) :
  return 'ios'
  if 22 - 22: oOO0O00Oo0O0o % iI111iIIii * OoooooooOO - OoO0oo0OOOO00 / iIii1I11I1II1
  if 86 - 86: OoooooooOO . iI111iIIii % o0I11iI / IIii11I1 * iI111iIIii / OoO0oo0OOOO00
  if 64 - 64: i11iIiiIii
  if 38 - 38: o0O0O0ooO / iI1Ii1iI11iiI - o0O0O0ooO . IIii11I1
  if 69 - 69: OoooooooOO + IIIIii1I
  if 97 - 97: I111I1Iiii1i - OoOoO / oOO0O00Oo0O0o . i11iIiiIii % ii1Ii1I1Ii11i * ii1Ii1I1Ii11i
  if 1 - 1: iI1Ii1iI11iiI % OooOO
def iIIII ( path ) :
 global total_files
 global total_size
 total_size = 0
 total_files = 0
 for oOoO00 , iI1IIIii , I1i11ii11 in os . walk ( path ) :
  for OO00O0oOO in I1i11ii11 :
   Ii1iI111 = os . path . join ( oOoO00 , OO00O0oOO )
   total_size += os . path . getsize ( Ii1iI111 )
   total_files = total_files + 1
 total_size = float ( total_size / 1024 ) / float ( 1024 )
 total_size = format ( total_size , '.2f' )
 total_size = str ( total_size ) + 'MB'
 total_size = '[COLOR aqua]' + total_size + '[/COLOR]'
 return total_size
 if 51 - 51: o0O0O0ooO * O0 / II111iiii . oOO0O00Oo0O0o % I111I1Iiii1i / iI1Ii1iI11iiI
 if 9 - 9: iI1Ii1iI11iiI % iI1Ii1iI11iiI % II111iiii
 if 30 - 30: o0O0O0ooO + OOOOo0 - o0O0O0ooO . o0O0O0ooO - II111iiii + O0
 if 86 - 86: i1IIi
 if 41 - 41: o0I11iI * IIii11I1 / o0I11iI % ii1Ii1I1Ii11i
 if 18 - 18: II111iiii . OoooooooOO % o0I11iI % oOO0O00Oo0O0o
 if 9 - 9: OoOoO - II1I11i * OoooooooOO . II1I11i
def ii1Ii1IiIIi ( ) :
 Oo = xbmcgui . Dialog ( )
 I1Iiiiiii = Oo . yesno ( '[COLOR aqua]Merlin Wizard[/COLOR]' , '[COLOR yellow]Completely Reset Your Configuration[/COLOR]' , '[COLOR yellow]Do You Wish To Continue?[/COLOR]' , '' , 'Cancel' , 'Continue' )
 if I1Iiiiiii == 1 :
  o0OO0 = xbmcaddon . Addon ( id = iIiiiI1IiI1I1 ) . getAddonInfo ( 'path' )
  o0OO0 = xbmc . translatePath ( o0OO0 )
  oOo00Oo0o0Oo = os . path . join ( o0OO0 , ".." , ".." ) ;
  oOo00Oo0o0Oo = os . path . abspath ( oOo00Oo0o0Oo )
  for I1 , I1O0 , iIi1IiII in os . walk ( oOo00Oo0o0Oo , topdown = False ) :
   for Ooo00OoOOO in iIi1IiII :
    try : os . remove ( os . path . join ( I1 , Ooo00OoOOO ) )
    except : pass
   for Ooo00OoOOO in I1O0 :
    try : os . rmdir ( os . path . join ( I1 , Ooo00OoOOO ) )
    except : pass
  Oo . ok ( '[COLOR aqua]Merlin Wizard[/COLOR]' , '[COLOR yellow]Configuration Reset[/COLOR]' , '[COLOR yellow]Please Restart[/COLOR]' )
 else :
  Oo . ok ( '[COLOR aqua]Merlin Wizard[/COLOR]' , '[COLOR yellow]Configuration Reset Aborted[/COLOR]' , '[COLOR yellow]Nothing Has Been Changed[/COLOR]' )
  quit ( )
  if 27 - 27: iI111iIIii . IIii11I1 . iIii1I11I1II1 . iIii1I11I1II1
  if 20 - 20: OoO0oo0OOOO00 / i1IIi
  if 71 - 71: o0I11iI . i1IIi
  if 94 - 94: I111I1Iiii1i . OOOOo0
  if 84 - 84: O0 . IIii11I1 - II111iiii . OooOO / II111iiii
  if 47 - 47: OoooooooOO
  if 4 - 4: iI1Ii1iI11iiI % IIii11I1
def O00O ( ) :
 iiiI1I1iIIIi1 = xbmcgui . DialogProgress ( )
 I1oOO0o0 = xbmcgui . Dialog ( )
 iiI11I1i1i1iI = xbmcgui . Dialog ( ) . yesno ( "[COLOR red][B]WARNING![/B][/COLOR]" , 'Are you sure you want to [COLOR yellow]FRESH START?[/COLOR]' , '' , 'All Data [COLOR red]EXCLUDING THIS WIZARD[/COLOR] Will Be Completely Erased!' , yeslabel = 'Yes' , nolabel = 'No' )
 if iiI11I1i1i1iI == 0 :
  return
 elif iiI11I1i1i1iI == 1 :
  iiiI1I1iIIIi1 . create ( "[COLOR yellow][B]WORKING...[/B][/COLOR]" , "Wiping Data..." , '' , 'Please Wait!' )
  try :
   for I1 , I1O0 , iIi1IiII in os . walk ( I1IiI , topdown = True ) :
    I1O0 [ : ] = [ OoOOo000o0 for OoOOo000o0 in I1O0 if OoOOo000o0 not in IIiiiiiiIi1I1 ]
    for Ooo00OoOOO in iIi1IiII :
     try :
      os . remove ( os . path . join ( I1 , Ooo00OoOOO ) )
      os . rmdir ( os . path . join ( I1 , Ooo00OoOOO ) )
     except : pass
    for Ooo00OoOOO in I1O0 :
     try : os . rmdir ( os . path . join ( I1 , Ooo00OoOOO ) ) ; os . rmdir ( I1 )
     except : pass
  except : pass
 I1oOO0o0 . ok ( '[COLOR yellow][B]COMPLETE![/B][/COLOR]' , 'Data Successfully Erased, Please Click Ok To Restart For Changes To Take Effect, Then Re Launch Merlin Wizard!' , '' , '' )
 iiIi1IIiI ( )
 if 12 - 12: II111iiii . IIii11I1 / I111I1Iiii1i
 if 77 - 77: OooOO - iI1Ii1iI11iiI % IIii11I1 - O0
 if 67 - 67: I111I1Iiii1i + II1I11i
 if 84 - 84: O0 * OoooooooOO - o0O0O0ooO * o0O0O0ooO
 if 8 - 8: OooOO / i1IIi . ii1Ii1I1Ii11i
 if 41 - 41: iI111iIIii + OoOoO
 if 86 - 86: o0I11iI . iIii1I11I1II1 - OoOoO
def I1i11 ( ) :
 I1oOO0o0 = xbmcgui . Dialog ( )
 if os . path . exists ( O00OOOoOoo0O ) :
  try :
   shutil . rmtree ( O00OOOoOoo0O )
  except :
   I1oOO0o0 . ok ( o0OoOoOO00 , "[COLOR red]Oops, There Was An Error Removing Data![/COLOR]" )
   sys . exit ( 0 )
  I1oOO0o0 . ok ( o0OoOoOO00 , "[COLOR lawngreen]CLEARED[/COLOR]" )
  xbmc . executebuiltin ( "Container.Refresh" )
  sys . exit ( 0 )
 else :
  I1oOO0o0 . ok ( o0OoOoOO00 , "[COLOR yellow]No YouTube Data Present![/COLOR]" )
  sys . exit ( 0 )
  if 56 - 56: O0
  if 61 - 61: OoO0oo0OOOO00 / I111I1Iiii1i / II1I11i * O0
  if 23 - 23: ii1Ii1I1Ii11i - I111I1Iiii1i + IIii11I1
  if 12 - 12: iI1Ii1iI11iiI / OooOO % OoO0oo0OOOO00 / i11iIiiIii % OoooooooOO
  if 15 - 15: iIii1I11I1II1 % OoooooooOO - II1I11i * oOO0O00Oo0O0o + IIii11I1
  if 11 - 11: iI111iIIii * oOO0O00Oo0O0o - o0I11iI
  if 66 - 66: o0I11iI . i11iIiiIii - iI111iIIii * OoO0oo0OOOO00 + OoooooooOO * IIIIii1I
  if 74 - 74: II1I11i
def OO000o00 ( ) :
 i11i11 = 'http://mrepo.uk/video/build1.wmv'
 xbmc . Player ( xbmc . PLAYER_CORE_DVDPLAYER ) . play ( i11i11 )
 if 72 - 72: i1IIi - II111iiii - I111I1Iiii1i + I111I1Iiii1i * OoO0oo0OOOO00 * I111I1Iiii1i
 if 33 - 33: II1I11i
 if 49 - 49: OoOoO % iI111iIIii % iI111iIIii / iI111iIIii
 if 53 - 53: iIii1I11I1II1
 if 68 - 68: OoooooooOO % II111iiii
 if 26 - 26: II111iiii % i11iIiiIii % iIii1I11I1II1 % IIii11I1 * IIii11I1 * IIIIii1I
 if 24 - 24: II111iiii % OOOOo0 - OooOO + iI1Ii1iI11iiI * IIIIii1I
 if 2 - 2: oOO0O00Oo0O0o - o0O0O0ooO
 if 83 - 83: ii1Ii1I1Ii11i % OoO0oo0OOOO00 % oOO0O00Oo0O0o - II111iiii * I111I1Iiii1i / OoooooooOO
def IIIiIi ( ) :
 I1oOO0o0 = xbmcgui . Dialog ( )
 I1oOO0o0 . ok ( o0OoOoOO00 , "[COLOR yellow]C O M I N G   S O O N ![/COLOR]" )
 sys . exit ( 0 )
 if 34 - 34: OoooooooOO . O0 / ii1Ii1I1Ii11i * o0I11iI - IIIIii1I
 if 36 - 36: i1IIi / O0 / OoOoO - O0 - i1IIi
 if 22 - 22: i1IIi + oOO0O00Oo0O0o
 if 54 - 54: OooOO % I111I1Iiii1i . OOOOo0 + ii1Ii1I1Ii11i - I111I1Iiii1i * iI1Ii1iI11iiI
 if 92 - 92: OoO0oo0OOOO00 + OOOOo0 / II1I11i % OoOoO % o0O0O0ooO . OoooooooOO
 if 52 - 52: OooOO / i11iIiiIii - I111I1Iiii1i . o0O0O0ooO % iIii1I11I1II1 + OoO0oo0OOOO00
 if 71 - 71: ii1Ii1I1Ii11i % IIii11I1 * o0I11iI . O0 / oOO0O00Oo0O0o . IIIIii1I
def IiIIi1 ( ) :
 plugintools . open_settings_dialog ( )
 if 58 - 58: II1I11i / ii1Ii1I1Ii11i
 if 44 - 44: I111I1Iiii1i
 if 54 - 54: oOO0O00Oo0O0o - IIii11I1 - OOOOo0 . iIii1I11I1II1
 if 79 - 79: oOO0O00Oo0O0o . OoOoO
 if 40 - 40: OoO0oo0OOOO00 + II1I11i . OoO0oo0OOOO00 % OooOO
 if 15 - 15: oOO0O00Oo0O0o * II1I11i % IIIIii1I * iIii1I11I1II1 - i11iIiiIii
 if 60 - 60: iI1Ii1iI11iiI * OOOOo0 % OoOoO + ii1Ii1I1Ii11i
def IiIi1I1 ( ) :
 xbmc . executebuiltin ( "ToggleDebug" )
 if 52 - 52: i1IIi
 if 84 - 84: oOO0O00Oo0O0o / o0O0O0ooO
 if 86 - 86: o0I11iI * II111iiii - O0 . o0I11iI % iIii1I11I1II1 / I111I1Iiii1i
 if 11 - 11: iI1Ii1iI11iiI * ii1Ii1I1Ii11i + IIIIii1I / IIIIii1I
 if 37 - 37: i11iIiiIii + i1IIi
 if 23 - 23: iI111iIIii + IIii11I1 . o0I11iI * iI1Ii1iI11iiI + IIIIii1I
 if 18 - 18: o0O0O0ooO * OoO0oo0OOOO00 . o0O0O0ooO / O0
def II1i11I ( ) :
 I1oOO0o0 = xbmcgui . Dialog ( )
 if I1oOO0o0 . yesno ( o0OoOoOO00 , "Force Close?" , "  " , nolabel = 'No' , yeslabel = 'Yes' ) :
  iiIi1IIiI ( )
  if 8 - 8: OoO0oo0OOOO00
  if 4 - 4: IIIIii1I + IIIIii1I * OooOO - o0I11iI
  if 78 - 78: oOO0O00Oo0O0o / II111iiii % o0I11iI
  if 52 - 52: I111I1Iiii1i - iI111iIIii * ii1Ii1I1Ii11i
  if 17 - 17: OoooooooOO + I111I1Iiii1i * IIii11I1 * o0I11iI
  if 36 - 36: O0 + II1I11i
  if 5 - 5: II1I11i * o0I11iI
def I11iIiI1I1i11 ( ) :
 ii1I11iIiIII1 = xbmc . translatePath ( os . path . join ( 'special://home/addons/packages' , '' ) )
 for I1 , I1O0 , iIi1IiII in os . walk ( ii1I11iIiIII1 ) :
  oOO0OOOOoooO = 0
  oOO0OOOOoooO += len ( iIi1IiII )
  if oOO0OOOOoooO > 0 :
   for OO00O0oOO in iIi1IiII :
    os . unlink ( os . path . join ( I1 , OO00O0oOO ) )
   for OoOOo000o0 in I1O0 :
    shutil . rmtree ( os . path . join ( I1 , OoOOo000o0 ) )
   packagestextbox . setLabel ( '[COLOR lawngreen]HEALTHY[/COLOR]' )
  else : packagestextbox . setLabel ( '[COLOR lawngreen]HEALTHY[/COLOR]' )
  if 22 - 22: IIii11I1 + iIii1I11I1II1
  if 24 - 24: o0I11iI % i1IIi + iI111iIIii . i11iIiiIii . IIIIii1I
  if 17 - 17: IIIIii1I . II111iiii . OooOO / IIIIii1I
  if 57 - 57: IIii11I1
  if 67 - 67: OoOoO . OooOO
  if 87 - 87: ii1Ii1I1Ii11i % oOO0O00Oo0O0o
  if 83 - 83: II111iiii - IIii11I1
def iiii111II ( ) :
 if Oo . yesno ( o0OoOoOO00 , "Are You Sure You Want To [COLOR red]Delete The Thumbnails Folder?[/COLOR]" , "Process Will Automatically Restart When Complete, If Not Then Manual Force Close By Exiting Or Pulling The Power From Your Device!" , nolabel = 'No, Abort' , yeslabel = 'Yes, Delete' ) :
  shutil . rmtree ( O000OOo00oo )
  iiIi1IIiI ( )
  if 35 - 35: i1IIi - iIii1I11I1II1 + i1IIi
  if 86 - 86: iIii1I11I1II1 + o0I11iI . i11iIiiIii - oOO0O00Oo0O0o
  if 51 - 51: o0I11iI
  if 14 - 14: o0O0O0ooO % ii1Ii1I1Ii11i % II1I11i - i11iIiiIii
  if 53 - 53: oOO0O00Oo0O0o % II1I11i
  if 59 - 59: I111I1Iiii1i % iIii1I11I1II1 . i1IIi + II111iiii * o0O0O0ooO
  if 41 - 41: oOO0O00Oo0O0o % IIIIii1I
def IIIIiii1IIii ( ) :
 i1iIiIi1I = i1I1IIIiiI ( )
 OO0O0ooOOO00 = i1iIiIi1I . replace ( iIiiiI , "" )
 if os . path . exists ( i1iIiIi1I ) or not i1iIiIi1I == False :
  OO00O0oOO = open ( i1iIiIi1I , mode = 'r' ) ; Ii = OO00O0oOO . read ( ) ; OO00O0oOO . close ( )
  IiiiiI1 ( "%s - %s" % ( o0OoOoOO00 , OO0O0ooOOO00 ) , Ii )
 else :
  OO00OOoO0o ( 'View Log' , 'No Log File Found!' )
  if 4 - 4: i1IIi - i11iIiiIii / i11iIiiIii / OoooooooOO
  if 100 - 100: II1I11i + OoO0oo0OOOO00 - O0 % II111iiii . iI111iIIii
  if 92 - 92: II111iiii * OoooooooOO - OOOOo0
  if 58 - 58: iIii1I11I1II1 + O0
  if 30 - 30: OooOO % iI111iIIii * I111I1Iiii1i - IIIIii1I * oOO0O00Oo0O0o % OooOO
  if 46 - 46: i11iIiiIii - O0 . ii1Ii1I1Ii11i
  if 100 - 100: iI1Ii1iI11iiI / OoO0oo0OOOO00 * iI111iIIii . O0 / I111I1Iiii1i
def i1I1IIIiiI ( ) :
 I1Iiiiiii = False
 if os . path . exists ( os . path . join ( iIiiiI , 'xbmc.log' ) ) :
  I1Iiiiiii = os . path . join ( iIiiiI , 'xbmc.log' )
 elif os . path . exists ( os . path . join ( iIiiiI , 'kodi.log' ) ) :
  I1Iiiiiii = os . path . join ( iIiiiI , 'kodi.log' )
 elif os . path . exists ( os . path . join ( iIiiiI , 'spmc.log' ) ) :
  I1Iiiiiii = os . path . join ( iIiiiI , 'spmc.log' )
 elif os . path . exists ( os . path . join ( iIiiiI , 'tvmc.log' ) ) :
  I1Iiiiiii = os . path . join ( iIiiiI , 'tvmc.log' )
 return I1Iiiiiii
 if 83 - 83: OOOOo0
 if 48 - 48: II111iiii * I111I1Iiii1i * OOOOo0
 if 50 - 50: o0O0O0ooO % i1IIi
 if 21 - 21: OoooooooOO - iIii1I11I1II1
 if 93 - 93: ii1Ii1I1Ii11i - OoO0oo0OOOO00 % o0I11iI . o0I11iI - OooOO
 if 90 - 90: OooOO + II111iiii * IIIIii1I / oOO0O00Oo0O0o . OoO0oo0OOOO00 + OoO0oo0OOOO00
 if 40 - 40: OooOO / o0I11iI % i11iIiiIii % IIIIii1I / iI1Ii1iI11iiI
def IiiiiI1 ( heading , announce ) :
 class ooOOOOo0 ( ) :
  WINDOW = 10147
  CONTROL_LABEL = 1
  CONTROL_TEXTBOX = 5
  def __init__ ( self , * args , ** kwargs ) :
   xbmc . executebuiltin ( "ActivateWindow(%d)" % ( self . WINDOW , ) )
   self . win = xbmcgui . Window ( self . WINDOW )
   xbmc . sleep ( 500 )
   self . setControls ( )
  def setControls ( self ) :
   self . win . getControl ( self . CONTROL_LABEL ) . setLabel ( heading )
   try : OO00O0oOO = open ( announce ) ; IiiIi = OO00O0oOO . read ( )
   except : IiiIi = announce
   self . win . getControl ( self . CONTROL_TEXTBOX ) . setText ( str ( IiiIi ) )
   return
 ooOOOOo0 ( )
 while xbmc . getCondVisibility ( 'Window.IsVisible(10147)' ) :
  time . sleep ( .5 )
  if 10 - 10: OoOoO / II1I11i
  if 15 - 15: iI111iIIii . o0I11iI / iI111iIIii * IIii11I1 - iI1Ii1iI11iiI % IIIIii1I
  if 57 - 57: O0 % o0I11iI % ii1Ii1I1Ii11i
  if 45 - 45: IIIIii1I + II111iiii * i11iIiiIii
  if 13 - 13: OoooooooOO * ii1Ii1I1Ii11i - oOO0O00Oo0O0o / I111I1Iiii1i + IIii11I1 + o0O0O0ooO
  if 39 - 39: iIii1I11I1II1 - OoooooooOO
  if 81 - 81: IIIIii1I - O0 * OoooooooOO
def OO00OOoO0o ( title , message , times = 2000 , icon = o0OOO ) :
 xbmc . executebuiltin ( 'XBMC.Notification(%s, %s, %s, %s)' % ( title , message , times , icon ) )
 if 23 - 23: II111iiii / ii1Ii1I1Ii11i
 if 28 - 28: II1I11i * OooOO - OoOoO
 if 19 - 19: IIii11I1
 if 67 - 67: O0 % iIii1I11I1II1 / o0O0O0ooO . i11iIiiIii - oOO0O00Oo0O0o + O0
 if 27 - 27: I111I1Iiii1i
 if 89 - 89: II111iiii / ii1Ii1I1Ii11i
 if 14 - 14: I111I1Iiii1i . iI1Ii1iI11iiI * OooOO + II111iiii - OooOO + I111I1Iiii1i
def oo00oO0o ( ) :
 IIIIIiII1 = os . path . join ( xbmc . translatePath ( 'special://home' ) , 'cache' )
 if os . path . exists ( IIIIIiII1 ) == True :
  for I1 , I1O0 , iIi1IiII in os . walk ( IIIIIiII1 ) :
   oOO0OOOOoooO = 0
   oOO0OOOOoooO += len ( iIi1IiII )
   if oOO0OOOOoooO > 0 :
    for OO00O0oOO in iIi1IiII :
     try :
      os . unlink ( os . path . join ( I1 , OO00O0oOO ) )
     except :
      pass
    for OoOOo000o0 in I1O0 :
     try :
      shutil . rmtree ( os . path . join ( I1 , OoOOo000o0 ) )
     except :
      pass
   else :
    pass
 if xbmc . getCondVisibility ( 'system.platform.ATV2' ) :
  iii11 = os . path . join ( '/private/var/mobile/Library/Caches/AppleTV/Video/' , 'Other' )
  for I1 , I1O0 , iIi1IiII in os . walk ( iii11 ) :
   oOO0OOOOoooO = 0
   oOO0OOOOoooO += len ( iIi1IiII )
   if oOO0OOOOoooO > 0 :
    for OO00O0oOO in iIi1IiII :
     os . unlink ( os . path . join ( I1 , OO00O0oOO ) )
    for OoOOo000o0 in I1O0 :
     shutil . rmtree ( os . path . join ( I1 , OoOOo000o0 ) )
   else :
    pass
  i1oO = os . path . join ( '/private/var/mobile/Library/Caches/AppleTV/Video/' , 'LocalAndRental' )
  for I1 , I1O0 , iIi1IiII in os . walk ( i1oO ) :
   oOO0OOOOoooO = 0
   oOO0OOOOoooO += len ( iIi1IiII )
   if oOO0OOOOoooO > 0 :
    for OO00O0oOO in iIi1IiII :
     os . unlink ( os . path . join ( I1 , OO00O0oOO ) )
    for OoOOo000o0 in I1O0 :
     shutil . rmtree ( os . path . join ( I1 , OoOOo000o0 ) )
   else :
    pass
 Oo = xbmcgui . Dialog ( )
 cachetextbox . setLabel ( '[COLOR lawngreen]HEALTHY[/COLOR]' )
 if 30 - 30: II1I11i . OoOoO
 if 57 - 57: IIii11I1 . II1I11i + II111iiii
 if 43 - 43: OOOOo0 % iI111iIIii
 if 69 - 69: iI111iIIii % OoOoO
 if 86 - 86: ii1Ii1I1Ii11i / ii1Ii1I1Ii11i
 if 28 - 28: i11iIiiIii / OoO0oo0OOOO00 . iIii1I11I1II1 / II111iiii
 if 72 - 72: OoooooooOO / iI1Ii1iI11iiI + oOO0O00Oo0O0o / o0I11iI * oOO0O00Oo0O0o
def OOoooO00o0oo0 ( ) :
 Ii1iIi111i1i1 = speedtest . speedtest ( )
 speedthumb . setImage ( Ii1iIi111i1i1 [ 0 ] )
 if 45 - 45: o0I11iI . OoO0oo0OOOO00 % o0I11iI * iI1Ii1iI11iiI % iI1Ii1iI11iiI
 if 63 - 63: OOOOo0
 if 53 - 53: OoooooooOO - o0O0O0ooO
 if 87 - 87: ii1Ii1I1Ii11i . iI1Ii1iI11iiI
 if 17 - 17: oOO0O00Oo0O0o . i11iIiiIii
 if 5 - 5: IIIIii1I + O0 + O0 . OOOOo0 - OooOO
 if 63 - 63: ii1Ii1I1Ii11i
def IiiiiI1i1Iii ( ) :
 Oo0 = Oo . yesno ( '[COLOR yellow][B]ANDROID ONLY[/B][/COLOR]' , 'Would You Like To Download And Install' , 'The Selected APK From Merlin App Store?' , ' ' , 'Cancel' , 'Continue' )
 if Oo0 :
  I1IIIiI1I1ii1 = xbmc . translatePath ( os . path . join ( 'special://home/addons' , 'packages' ) )
  iiiI1I1iIIIi1 = xbmcgui . DialogProgress ( )
  iiiI1I1iIIIi1 . create ( "[COLOR aqua]Merlin Wizard[/COLOR]" , "Downloading App" , '' , 'Please Wait' )
  IiiI1iiiiI1iI = os . path . join ( I1IIIiI1I1ii1 , 'download.apk' )
  try :
   os . remove ( IiiI1iiiiI1iI )
  except :
   pass
  downloader . download ( url , IiiI1iiiiI1iI , iiiI1I1iIIIi1 )
  xbmc . sleep ( 500 )
  Oo . ok ( o0OoOoOO00 , "Launching The APP To Be Installed" , "Follow The Install Process To Complete." )
  xbmc . executebuiltin ( 'StartAndroidActivity("","android.intent.action.VIEW","application/vnd.android.package-archive","file:' + IiiI1iiiiI1iI + '")' )
  Oo . ok ( '[COLOR aqua]Merlin Wizard[/COLOR]' , '[COLOR yellow]Installation Complete[/COLOR]' , '[COLOR yellow]Please Press OK To Close This Dialog![/COLOR]' )
 else : quit ( )
 if 79 - 79: OoOoO % I111I1Iiii1i / iIii1I11I1II1 + o0I11iI * OoOoO
 if 30 - 30: OoooooooOO / IIii11I1 + iI111iIIii / IIIIii1I * O0
 if 16 - 16: II1I11i / i11iIiiIii
 if 64 - 64: i11iIiiIii / oOO0O00Oo0O0o * i1IIi
 if 73 - 73: II1I11i - o0I11iI - ii1Ii1I1Ii11i - iI1Ii1iI11iiI
 if 65 - 65: OoO0oo0OOOO00
 if 7 - 7: o0O0O0ooO . o0I11iI / IIIIii1I . I111I1Iiii1i * IIii11I1 - II111iiii
def I1ii1iI1II11ii ( part , whole ) :
 return 100 * float ( part ) / float ( whole )
 if 8 - 8: OooOO * O0
 if 73 - 73: OoO0oo0OOOO00 / ii1Ii1I1Ii11i / IIii11I1 / OoOoO
 if 11 - 11: o0I11iI + o0O0O0ooO - OoooooooOO / OoOoO
 if 34 - 34: OooOO
 if 45 - 45: OooOO / II1I11i / oOO0O00Oo0O0o
 if 44 - 44: IIIIii1I - oOO0O00Oo0O0o / II111iiii * OoOoO * II1I11i
 if 73 - 73: OoO0oo0OOOO00 - iI1Ii1iI11iiI * i1IIi / i11iIiiIii * I111I1Iiii1i % II111iiii
def OooOoOOo0oO00 ( ) :
 if not "My_Build" in oo0OOo :
  if I1IiI in oo0OOo :
   I1oOO0o0 = xbmcgui . Dialog ( )
   I1oOO0o0 . ok ( o0OoOoOO00 , "Invalid path selected for your backups. The path you have selected will be removed during backup and cause an error. Please pick another path that is not in the Kodi directory" )
   plugintools . open_settings_dialog ( )
   sys . exit ( 0 )
 if not os . path . exists ( oo0OOo ) :
  try :
   os . makedirs ( oo0OOo )
  except :
   I1oOO0o0 = xbmcgui . Dialog ( )
   I1oOO0o0 . ok ( o0OoOoOO00 , "Invalid path selected for your backups. The directory specified does not exist or is not writable." )
   plugintools . open_settings_dialog ( )
   sys . exit ( 0 )
   if 73 - 73: iI111iIIii / IIIIii1I % IIIIii1I * IIii11I1 / IIIIii1I
   if 8 - 8: oOO0O00Oo0O0o
   if 35 - 35: o0O0O0ooO + i1IIi * ii1Ii1I1Ii11i - oOO0O00Oo0O0o . II1I11i
   if 31 - 31: OoO0oo0OOOO00
   if 15 - 15: O0 / II1I11i % IIIIii1I + OoO0oo0OOOO00
   if 23 - 23: iIii1I11I1II1 + O0
   if 58 - 58: II1I11i
def IiiIIIiI1ii ( default = "" , heading = "" , hidden = False ) :
 oo0OOoOoo0O0O = xbmc . Keyboard ( default , heading , hidden )
 oo0OOoOoo0O0O . doModal ( )
 if oo0OOoOoo0O0O . isConfirmed ( ) :
  return unicode ( oo0OOoOoo0O0O . getText ( ) , "utf-8" )
 return default
 if 15 - 15: iI111iIIii
 if 20 - 20: o0O0O0ooO % O0 . OOOOo0
 if 93 - 93: i11iIiiIii % iIii1I11I1II1 % i11iIiiIii + OoO0oo0OOOO00 / OoO0oo0OOOO00 / II111iiii
 if 49 - 49: I111I1Iiii1i . IIIIii1I . i11iIiiIii - II111iiii / oOO0O00Oo0O0o
 if 62 - 62: I111I1Iiii1i
 if 1 - 1: o0O0O0ooO / o0O0O0ooO - i11iIiiIii
 if 87 - 87: II1I11i / O0 * o0O0O0ooO / OoO0oo0OOOO00
def i1iIiIi1I ( log ) :
 xbmc . log ( "[%s]: %s" % ( o0OoOoOO00 , log ) )
 if not os . path . exists ( I1i1iiI1 ) : os . makedirs ( I1i1iiI1 )
 if not os . path . exists ( i1111 ) : OO00O0oOO = open ( i1111 , 'w' ) ; OO00O0oOO . close ( )
 with open ( i1111 , 'a' ) as OO00O0oOO :
  I1iiIII = "[%s %s] %s" % ( datetime . now ( ) . date ( ) , str ( datetime . now ( ) . time ( ) ) [ : 8 ] , log )
  OO00O0oOO . write ( I1iiIII . rstrip ( '\r\n' ) + '\n' )
  if 16 - 16: ii1Ii1I1Ii11i + OooOO / OoO0oo0OOOO00
  if 82 - 82: o0O0O0ooO * i11iIiiIii % II111iiii - OoooooooOO
  if 90 - 90: II1I11i . ii1Ii1I1Ii11i * i1IIi - i1IIi
  if 16 - 16: iI1Ii1iI11iiI * i1IIi - OoO0oo0OOOO00 . o0O0O0ooO % IIii11I1 / OoO0oo0OOOO00
  if 14 - 14: iIii1I11I1II1 * OOOOo0 * IIIIii1I / iIii1I11I1II1 * o0O0O0ooO / IIii11I1
  if 77 - 77: OoOoO + OOOOo0 + OOOOo0 * oOO0O00Oo0O0o / OoooooooOO . oOO0O00Oo0O0o
  if 62 - 62: i1IIi - i1IIi
def oOOO0O0Ooo ( home , excludes = True ) :
 IiI1i111IiIiIi1 = [ iIiiiI1IiI1I1 , 'cache' , 'system' , 'packages' , 'Thumbnails' , 'peripheral_data' , 'temp' , 'My_Builds' , 'library' , 'keymaps' ]
 i1II11II1 = [ 'Textures13.db' , '.DS_Store' , 'advancedsettings.xml' , 'Thumbs.db' , '.gitignore' ]
 II1IIIii = [ ]
 for iIIIiIi1I1i , I1O0 , iIi1IiII in os . walk ( home ) :
  if excludes :
   I1O0 [ : ] = [ OoOOo000o0 for OoOOo000o0 in I1O0 if OoOOo000o0 not in IiI1i111IiIiIi1 ]
   iIi1IiII [ : ] = [ OO00O0oOO for OO00O0oOO in iIi1IiII if OO00O0oOO not in i1II11II1 ]
  for file in iIi1IiII :
   II1IIIii . append ( file )
 return len ( II1IIIii )
 if 78 - 78: iIii1I11I1II1 % o0I11iI + IIIIii1I / i1IIi % II111iiii + I111I1Iiii1i
 if 91 - 91: iIii1I11I1II1 % OoOoO . OoO0oo0OOOO00 + oOO0O00Oo0O0o + OoO0oo0OOOO00
 if 95 - 95: oOO0O00Oo0O0o + IIIIii1I * I111I1Iiii1i
 if 16 - 16: IIii11I1 / iI1Ii1iI11iiI + OoOoO % iIii1I11I1II1 - i1IIi . ii1Ii1I1Ii11i
 if 26 - 26: OoO0oo0OOOO00 * o0O0O0ooO . i1IIi
 if 59 - 59: O0 + i1IIi - OoO0oo0OOOO00
 if 62 - 62: i11iIiiIii % I111I1Iiii1i . o0O0O0ooO . I111I1Iiii1i
def ooOo0O0O0oOO0 ( url ) :
 if url == 'http://' : return False
 try :
  iIiIIi = urllib2 . Request ( url )
  III1I = urllib2 . urlopen ( iIiIIi )
  III1I . close ( )
 except Exception , I1I111iIi :
  return I1I111iIi
 return True
 if 53 - 53: iIii1I11I1II1 + OoO0oo0OOOO00 - o0I11iI - ii1Ii1I1Ii11i / OooOO % i11iIiiIii
 if 3 - 3: iI111iIIii . OooOO % iI1Ii1iI11iiI + IIIIii1I
 if 64 - 64: i1IIi
 if 29 - 29: OoO0oo0OOOO00 / i11iIiiIii / iI1Ii1iI11iiI % ii1Ii1I1Ii11i % i11iIiiIii
 if 18 - 18: I111I1Iiii1i + OOOOo0
 if 80 - 80: ii1Ii1I1Ii11i + OoO0oo0OOOO00 * oOO0O00Oo0O0o + OoOoO
 if 75 - 75: IIii11I1 / OoO0oo0OOOO00 / I111I1Iiii1i / o0O0O0ooO % OooOO + II111iiii
def I1III111i ( url ) :
 I1IiI = xbmc . translatePath ( 'special://home' )
 I1oOO0o0 = xbmcgui . Dialog ( )
 I1ii11iIi11i . create ( o0OoOoOO00 , "Renaming paths..." , '' , '' )
 url = xbmc . translatePath ( 'special://userdata' )
 for I1 , I1O0 , iIi1IiII in os . walk ( url ) :
  for file in iIi1IiII :
   if file . endswith ( ".xml" ) :
    I1ii11iIi11i . update ( 0 , "Fixing" , "[COLOR aqua]" + file + "[/COLOR]" , "Please wait....." )
    iiI1iii = open ( ( os . path . join ( I1 , file ) ) ) . read ( )
    OOoOOo00O0o0 = iiI1iii . replace ( I1IiI , 'special://home/' )
    OO00O0oOO = open ( ( os . path . join ( I1 , file ) ) , mode = 'w' )
    OO00O0oOO . write ( str ( OOoOOo00O0o0 ) )
    OO00O0oOO . close ( )
    if 83 - 83: iIii1I11I1II1 % o0I11iI % OoO0oo0OOOO00 % OOOOo0 . IIIIii1I % O0
    if 47 - 47: OoO0oo0OOOO00
    if 66 - 66: iI1Ii1iI11iiI - o0O0O0ooO
    if 33 - 33: iI1Ii1iI11iiI / OoOoO
    if 12 - 12: II111iiii
    if 2 - 2: i1IIi - iI1Ii1iI11iiI + IIii11I1 . II111iiii
    if 25 - 25: ii1Ii1I1Ii11i
def ii1I1IIii11 ( type ) :
 file = Oo . browse ( 1 , 'Browse And Select The Zip File To Restore!' , 'files' , '.zip' , False , False , I1IiI )
 if file == "" or not file . endswith ( '.zip' ) :
  OO00OOoO0o ( o0OoOoOO00 , "Local Restore: Cancelled" )
  return
 I1ii11iIi11i . create ( o0OoOoOO00 , 'Installing Local Zip File' , '' , 'Please Wait' )
 if type == "gui" : iI1 = IiII
 else : iI1 = I1IiI
 i1iIiIi1I ( iI1 )
 I1ii11iIi11i . update ( 0 , 'Restoring From Local Zip File' , '' , 'Please Wait' )
 iiII11I = extract . all ( file , iI1 , I1ii11iIi11i )
 I1ii11iIi11i . close ( )
 Oo . ok ( '[COLOR aqua]Merlin Wizard[/COLOR]' , '[COLOR yellow]Installation Complete[/COLOR]' , '[COLOR yellow]Please Press OK To Reboot Or Force Close Now![/COLOR]' )
 iiIi1IIiI ( )
 if 32 - 32: I111I1Iiii1i % OooOO - o0I11iI % iI111iIIii . OOOOo0
 if 47 - 47: IIii11I1 % i1IIi + i1IIi
 if 87 - 87: II1I11i * I111I1Iiii1i % o0O0O0ooO % o0I11iI
 if 4 - 4: o0I11iI + oOO0O00Oo0O0o / ii1Ii1I1Ii11i
 if 13 - 13: iI111iIIii
 if 80 - 80: oOO0O00Oo0O0o - OoO0oo0OOOO00
 if 41 - 41: OoO0oo0OOOO00 - II1I11i * iI1Ii1iI11iiI
def OO0OoOo0OOO ( name , url , mode , iconimage , fanart , description ) :
 Ii1ii11IIIi = sys . argv [ 0 ] + "?url=" + urllib . quote_plus ( url ) + "&mode=" + str ( mode ) + "&name=" + urllib . quote_plus ( name ) + "&fanart=" + urllib . quote_plus ( fanart )
 OOoooOOOo0oO = True
 oO0Ooo0OooOOo = xbmcgui . ListItem ( name , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage )
 oO0Ooo0OooOOo . setInfo ( type = "Video" , infoLabels = { "Title" : name } )
 oO0Ooo0OooOOo . setProperty ( "Fanart_Image" , fanart )
 OOoooOOOo0oO = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = Ii1ii11IIIi , listitem = oO0Ooo0OooOOo , isFolder = False )
 return OOoooOOOo0oO
 if 71 - 71: o0O0O0ooO + i1IIi * II1I11i % II1I11i / II1I11i
 if 55 - 55: OoooooooOO + OOOOo0 + OoooooooOO * OooOO
 if 68 - 68: O0
 if 2 - 2: OoOoO + O0 * OoOoO - oOO0O00Oo0O0o + ii1Ii1I1Ii11i
 if 43 - 43: IIIIii1I - o0I11iI
 if 36 - 36: IIIIii1I - iI111iIIii
 if 24 - 24: OoO0oo0OOOO00 + OooOO + IIii11I1 - iIii1I11I1II1
def I11Oo0oO00 ( ) :
 if I11i . getSetting ( 'intro' ) == "true" :
  IiiI1III1I1 = xbmc . Player ( )
  IiiI1III1I1 . play ( ooo00OOOooO )
  xbmc . sleep ( 11000 )
  I11i . setSetting ( 'intro' , 'false' )
 else :
  pass
  if I11i . getSetting ( 'message' ) == "true" :
   if 80 - 80: OOOOo0 . IIii11I1
   OO = xbmcgui . Dialog ( )
   Ii = OO . ok ( "MERLIN WIZARD" , "[COLOR green]AUTOMATICALLY INSTALLS MERLIN AND COMMUNITY BUILDS!" ,
 "FORCE CLOSE WHEN EXTRACTION IS COMPLETE" ,
 "ENJOY ALL MERLIN WIZARD BUILDS. THANK-YOU. [/COLOR]"
 )
   if Ii == True :
    I11i . setSetting ( 'message' , 'false' )
   else :
    pass
  else :
   pass
   if 17 - 17: OooOO
   if 81 - 81: O0 / o0O0O0ooO - iIii1I11I1II1 / II111iiii
   if 86 - 86: iIii1I11I1II1
   if 18 - 18: OoOoO . II111iiii % o0I11iI % oOO0O00Oo0O0o
   if 87 - 87: iIii1I11I1II1 . OoooooooOO * o0I11iI
   if 100 - 100: OoOoO / i1IIi - iI1Ii1iI11iiI % oOO0O00Oo0O0o - iIii1I11I1II1
   if 17 - 17: IIii11I1 / OoO0oo0OOOO00 % II1I11i
def o0o ( display , mode = None , name = None , url = None , menu = None , description = o0OoOoOO00 , overwrite = True , fanart = i1 , icon = o0OOO , themeit = None ) :
 Ii1ii11IIIi = sys . argv [ 0 ]
 if not mode == None : Ii1ii11IIIi += "?mode=%s" % urllib . quote_plus ( mode )
 if not name == None : Ii1ii11IIIi += "&name=" + urllib . quote_plus ( name )
 if not url == None : Ii1ii11IIIi += "&url=" + urllib . quote_plus ( url )
 OOoooOOOo0oO = True
 if themeit : display = themeit % display
 oO0Ooo0OooOOo = xbmcgui . ListItem ( display , iconImage = "DefaultFolder.png" , thumbnailImage = icon )
 oO0Ooo0OooOOo . setInfo ( type = "Video" , infoLabels = { "Title" : display , "Plot" : description } )
 oO0Ooo0OooOOo . setProperty ( "Fanart_Image" , fanart )
 if not menu == None : oO0Ooo0OooOOo . addContextMenuItems ( menu , replaceItems = overwrite )
 OOoooOOOo0oO = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = Ii1ii11IIIi , listitem = oO0Ooo0OooOOo , isFolder = False )
 return OOoooOOOo0oO
 if 93 - 93: OooOO % i11iIiiIii % OOOOo0
 if 64 - 64: OOOOo0 + iI1Ii1iI11iiI * O0 / II1I11i - IIii11I1 % IIii11I1
 if 59 - 59: I111I1Iiii1i + OoooooooOO
 if 55 - 55: i11iIiiIii % iIii1I11I1II1 . i1IIi + OoooooooOO / i11iIiiIii
 if 10 - 10: iI111iIIii - ii1Ii1I1Ii11i * iIii1I11I1II1 % iIii1I11I1II1 * o0O0O0ooO - IIIIii1I
 if 97 - 97: II111iiii % OOOOo0 + OOOOo0 - OoOoO / oOO0O00Oo0O0o * iI1Ii1iI11iiI
 if 17 - 17: oOO0O00Oo0O0o
def i1i1IiIi1 ( content , viewType ) :
 if content :
  xbmcplugin . setContent ( int ( sys . argv [ 1 ] ) , content )
 if wiz . getS ( 'auto-view' ) == 'true' :
  xbmc . executebuiltin ( "Container.SetViewMode(%s)" % wiz . getS ( viewType ) )
  if 22 - 22: IIii11I1 * O0 . II111iiii - OoOoO
I11Oo0oO00 ( )
iIi1ii ( )
I1I1i1I . doModal ( ) # dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
]')